// Generated by psc version 0.6.9.5
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;
    
    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;
    
    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;
    
    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;
    
    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;
    
    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;
    
    function numComplement(n) {
      return ~n;
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
        this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
        this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
    };
    var Num = function (__superclass_Prelude$dotDivisionRing_0) {
        this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = numMod;
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_32) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_42) {
        if (_42 instanceof LT) {
            return "LT";
        };
        if (_42 instanceof GT) {
            return "GT";
        };
        if (_42 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_33) {
        if (_33) {
            return "true";
        };
        if (!_33) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_50) {
        return function (_51) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupOrdering = new Semigroup(function (_43) {
        return function (y) {
            if (_43 instanceof LT) {
                return LT.value;
            };
            if (_43 instanceof GT) {
                return GT.value;
            };
            if (_43 instanceof EQ) {
                return y;
            };
            throw new Error("Failed pattern match");
        };
    });
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var one = function (dict) {
        return dict.one;
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_34) {
        return function (_35) {
            return 0;
        };
    });
    var mod = function (dict) {
        return dict.mod;
    };
    var liftM1 = function (__dict_Monad_7) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_7)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_38) {
        return function (_39) {
            return false;
        };
    }, function (_36) {
        return function (_37) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_44) {
        return function (_45) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_46) {
        return function (_47) {
            if (!_46 && !_47) {
                return EQ.value;
            };
            if (!_46 && _47) {
                return LT.value;
            };
            if (_46 && _47) {
                return EQ.value;
            };
            if (_46 && !_47) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var divisionRingNumber = new DivisionRing(function () {
        return moduloSemiringNumber;
    }, function () {
        return ringNumber;
    });
    var numNumber = new Num(function () {
        return divisionRingNumber;
    });
    var $$const = function (a) {
        return function (_30) {
            return a;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _319 = compare(__dict_Ord_12)(a1)(a2);
                if (_319 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _320 = compare(__dict_Ord_13)(a1)(a2);
                if (_320 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _321 = compare(__dict_Ord_14)(a1)(a2);
                if (_321 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _322 = compare(__dict_Ord_15)(a1)(a2);
                if (_322 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_9) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_11) {
        return new Ord(function () {
            return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
        }, function (_48) {
            return function (_49) {
                if (_48.length === 0 && _49.length === 0) {
                    return EQ.value;
                };
                if (_48.length === 0) {
                    return LT.value;
                };
                if (_49.length === 0) {
                    return GT.value;
                };
                if (_48.length >= 1) {
                    var _329 = _48.slice(1);
                    if (_49.length >= 1) {
                        var _327 = _49.slice(1);
                        var _325 = compare(__dict_Ord_11)(_48[0])(_49[0]);
                        if (_325 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_11))(_329)(_327);
                        };
                        return _325;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_40) {
        return function (_41) {
            if (_40 instanceof LT && _41 instanceof LT) {
                return true;
            };
            if (_40 instanceof GT && _41 instanceof GT) {
                return true;
            };
            if (_40 instanceof EQ && _41 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var asTypeOf = function (x) {
        return function (_31) {
            return x;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Num: Num, 
        DivisionRing: DivisionRing, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        zshr: zshr, 
        shr: shr, 
        shl: shl, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        ".&.": $dot$amp$dot, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "%": $percent, 
        "-": $minus, 
        mod: mod, 
        "/": $div, 
        one: one, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        liftM1: liftM1, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "#": $hash, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        asTypeOf: asTypeOf, 
        "const": $$const, 
        flip: flip, 
        otherwise: otherwise, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showUnit: showUnit, 
        showString: showString, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showArray: showArray, 
        functorArr: functorArr, 
        applyArr: applyArr, 
        applicativeArr: applicativeArr, 
        bindArr: bindArr, 
        monadArr: monadArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        divisionRingNumber: divisionRingNumber, 
        numNumber: numNumber, 
        eqUnit: eqUnit, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        eqBoolean: eqBoolean, 
        eqArray: eqArray, 
        eqOrdering: eqOrdering, 
        showOrdering: showOrdering, 
        semigroupOrdering: semigroupOrdering, 
        ordUnit: ordUnit, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordArray: ordArray, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupUnit: semigroupUnit, 
        semigroupString: semigroupString, 
        semigroupArr: semigroupArr
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    var acos = Math.acos;;
    var asin = Math.asin;;
    var atan = Math.atan;;
    function atan2(y){  return function (x) {    return Math.atan2(y, x);  };};
    var ceil = Math.ceil;;
    var cos = Math.cos;;
    var exp = Math.exp;;
    var floor = Math.floor;;
    var log = Math.log;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    var round = Math.round;;
    var sin = Math.sin;;
    var sqrt = Math.sqrt;;
    var tan = Math.tan;;
    var e       = Math.E;;
    var ln2     = Math.LN2;;
    var ln10    = Math.LN10;;
    var log2e   = Math.LOG2E;;
    var log10e  = Math.LOG10E;;
    var pi      = Math.PI;;
    var sqrt1_2 = Math.SQRT1_2;;
    var sqrt2   = Math.SQRT2;;
    return {
        sqrt2: sqrt2, 
        sqrt1_2: sqrt1_2, 
        pi: pi, 
        log10e: log10e, 
        log2e: log2e, 
        ln10: ln10, 
        ln2: ln2, 
        e: e, 
        tan: tan, 
        sqrt: sqrt, 
        sin: sin, 
        round: round, 
        pow: pow, 
        min: min, 
        max: max, 
        log: log, 
        floor: floor, 
        exp: exp, 
        cos: cos, 
        ceil: ceil, 
        atan2: atan2, 
        atan: atan, 
        asin: asin, 
        acos: acos, 
        abs: abs
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function mkFn0(fn) {
      return function() {
        return fn({});
      };
    }
    ;
    
    function mkFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function mkFn2(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    }
    ;
    
    function mkFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    }
    ;
    
    function mkFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    }
    ;
    
    function mkFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    }
    ;
    
    function mkFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    }
    ;
    
    function mkFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    }
    ;
    
    function mkFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    }
    ;
    
    function mkFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    }
    ;
    
    function mkFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    }
    ;
    
    function runFn0(fn) {
      return fn();
    }
    ;
    
    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    
    function runFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        runFn10: runFn10, 
        runFn9: runFn9, 
        runFn8: runFn8, 
        runFn7: runFn7, 
        runFn6: runFn6, 
        runFn5: runFn5, 
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2, 
        runFn1: runFn1, 
        runFn0: runFn0, 
        mkFn10: mkFn10, 
        mkFn9: mkFn9, 
        mkFn8: mkFn8, 
        mkFn7: mkFn7, 
        mkFn6: mkFn6, 
        mkFn5: mkFn5, 
        mkFn4: mkFn4, 
        mkFn3: mkFn3, 
        mkFn2: mkFn2, 
        mkFn1: mkFn1, 
        mkFn0: mkFn0, 
        on: on
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;
    
    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
    var Char = function (x) {
        return x;
    };
    var showChar = new Prelude.Show(function (_57) {
        return "Char " + Prelude.show(Prelude.showString)(_57);
    });
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_53) {
        return function (_54) {
            return _53 === _54;
        };
    });
    var ordChar = new Prelude.Ord(function () {
        return eqChar;
    }, function (_55) {
        return function (_56) {
            return Prelude.compare(Prelude.ordString)(_55)(_56);
        };
    });
    var charString = function (_52) {
        return _52;
    };
    return {
        toCharCode: toCharCode, 
        fromCharCode: fromCharCode, 
        charString: charString, 
        eqChar: eqChar, 
        ordChar: ordChar, 
        showChar: showChar
    };
})();
var PS = PS || {};
PS.Data_String_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Char = PS.Data_Char;
    
    function charCodeAt(i) {
      return function(s) {
        if (s.length <= i) {
          throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
        };
        return s.charCodeAt(i);
      };
    }
    ;
    
    function charAt(i) {
      return function(s) {
        if (s.length <= i) {
          throw new Error("Data.String.Unsafe.charAt: Invalid index.");
        };
        return s.charAt(i);
      };
    }
    ;
    
    function $$char(s) {
      if (s.length != 1) {
        throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
      };
      return s.charAt(0);
    }
    ;
    return {
        charCodeAt: charCodeAt, 
        charAt: charAt, 
        "char": $$char
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    
    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;
    
    function whileE(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
          return {};
        };
      };
    }
    ;
    
    function forE(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    }
    ;
    
    function foreachE(as) {
      return function(f) {
        return function() {
          for (var i = 0; i < as.length; i++) {
            f(as[i])();
          }
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        foreachE: foreachE, 
        forE: forE, 
        whileE: whileE, 
        untilE: untilE, 
        runPure: runPure, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Exception = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function showErrorImpl(err) {
    return err.stack || err.toString();
  }
  ;
    
  function error(msg) {
    return new Error(msg);
  }
  ;
    
  function message(e) {
    return e.message;
  }
  ;
    
  function throwException(e) {
    return function() {
      throw e;
    };
  }
  ;
    
  function catchException(c) {
    return function(t) {
      return function() {
        try {
          return t();
        } catch(e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === '[object Error]') {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  }
  ;
    var showError = new Prelude.Show(showErrorImpl);
    return {
        catchException: catchException, 
        throwException: throwException, 
        message: message, 
        error: error, 
        showError: showError
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function random() {
    return Math.random();
  }
  ;
    var randomRange = function (min) {
        return function (max) {
            return function __do() {
                var _4 = random();
                return _4 * (max - min) + min;
            };
        };
    };
    var randomInt = function (low) {
        return function (high) {
            return function __do() {
                var _3 = random();
                return $$Math.floor(_3 * ((high - low) + 1)) + low;
            };
        };
    };
    return {
        randomRange: randomRange, 
        randomInt: randomInt, 
        random: random
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function modifySTRef(ref) {
      return function(f) {
        return function() {
          return ref.value = f(ref.value);
        };
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    
    function runST(f) {
      return f;
    }
    ;
    var pureST = function (st) {
        return Control_Monad_Eff.runPure(runST(st));
    };
    return {
        pureST: pureST, 
        runST: runST, 
        writeSTRef: writeSTRef, 
        modifySTRef: modifySTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    var print = function (__dict_Show_17) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_17)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_18) {
        return function (_60) {
            return function (m) {
                if (_60) {
                    return m;
                };
                if (!_60) {
                    return Prelude["return"](__dict_Monad_18)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_19) {
        return function (_61) {
            return function (m) {
                if (!_61) {
                    return m;
                };
                if (_61) {
                    return Prelude["return"](__dict_Monad_19)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_20) {
        return function (_58) {
            return function (m) {
                if (_58 === 0) {
                    return Prelude["return"](__dict_Monad_20)([  ]);
                };
                return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(m)(function (_6) {
                    return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_20)(_58 - 1)(m))(function (_5) {
                        return Prelude["return"](__dict_Monad_20)(Prelude[":"](_6)(_5));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_21) {
        return function (f) {
            return function (a) {
                return function (_59) {
                    if (_59.length === 0) {
                        return Prelude["return"](__dict_Monad_21)(a);
                    };
                    if (_59.length >= 1) {
                        var _356 = _59.slice(1);
                        return Prelude[">>="](__dict_Monad_21["__superclass_Prelude.Bind_1"]())(f(a)(_59[0]))(function (a$prime) {
                            return foldM(__dict_Monad_21)(f)(a$prime)(_356);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var filterM = function (__dict_Monad_22) {
        return function (p) {
            return function (_62) {
                if (_62.length === 0) {
                    return Prelude["return"](__dict_Monad_22)([  ]);
                };
                if (_62.length >= 1) {
                    var _363 = _62.slice(1);
                    return Prelude[">>="](__dict_Monad_22["__superclass_Prelude.Bind_1"]())(p(_62[0]))(function (_8) {
                        return Prelude[">>="](__dict_Monad_22["__superclass_Prelude.Bind_1"]())(filterM(__dict_Monad_22)(p)(_363))(function (_7) {
                            return Prelude["return"](__dict_Monad_22)((function () {
                                if (_8) {
                                    return Prelude[":"](_62[0])(_7);
                                };
                                if (!_8) {
                                    return _7;
                                };
                                throw new Error("Failed pattern match");
                            })());
                        });
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        filterM: filterM, 
        unless: unless, 
        when: when, 
        foldM: foldM, 
        replicateM: replicateM
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Lazy = function (defer) {
        this.defer = defer;
    };
    var Lazy1 = function (defer1) {
        this.defer1 = defer1;
    };
    var Lazy2 = function (defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_23) {
        return function (f) {
            return defer2(__dict_Lazy2_23)(function (_65) {
                return f(fix2(__dict_Lazy2_23)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_24) {
        return function (f) {
            return defer1(__dict_Lazy1_24)(function (_64) {
                return f(fix1(__dict_Lazy1_24)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_25) {
        return function (f) {
            return defer(__dict_Lazy_25)(function (_63) {
                return f(fix(__dict_Lazy_25)(f));
            });
        };
    };
    return {
        Lazy2: Lazy2, 
        Lazy1: Lazy1, 
        Lazy: Lazy, 
        fix2: fix2, 
        fix1: fix1, 
        fix: fix, 
        defer2: defer2, 
        defer1: defer1, 
        defer: defer
    };
})();
var PS = PS || {};
PS.Control_Functor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$dollar = function (__dict_Functor_26) {
        return function (x) {
            return function (f) {
                return Prelude["<$>"](__dict_Functor_26)(Prelude["const"](x))(f);
            };
        };
    };
    var $dollar$greater = function (__dict_Functor_27) {
        return function (f) {
            return function (x) {
                return Prelude["<$>"](__dict_Functor_27)(Prelude["const"](x))(f);
            };
        };
    };
    return {
        "$>": $dollar$greater, 
        "<$": $less$dollar
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Extend = function ($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_28) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_28)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_29) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_29)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_30) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_30)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_31) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_31)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var extend = function (__dict_Extend_32) {
        return $less$less$eq(__dict_Extend_32);
    };
    var duplicate = function (__dict_Extend_33) {
        return function (w) {
            return $less$less$eq(__dict_Extend_33)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        Extend: Extend, 
        duplicate: duplicate, 
        extend: extend, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        "<<=": $less$less$eq, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_34) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_34)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_35) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_35)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_36) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_36)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_37) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_37)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_38) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_38)(cond)(function (cond$prime) {
                        if (cond$prime) {
                            return t;
                        };
                        if (!cond$prime) {
                            return f;
                        };
                        throw new Error("Failed pattern match");
                    });
                };
            };
        };
    };
    return {
        ifM: ifM, 
        join: join, 
        "<=<": $less$eq$less, 
        ">=>": $greater$eq$greater, 
        "=<<": $eq$less$less
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_39) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_40) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_40)(Prelude["<$>"](__dict_Apply_40["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_41) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_41)(Prelude["<*>"](__dict_Apply_41)(Prelude["<*>"](__dict_Apply_41)(Prelude["<*>"](__dict_Apply_41)(Prelude["<$>"](__dict_Apply_41["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_42) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_42)(Prelude["<*>"](__dict_Apply_42)(Prelude["<*>"](__dict_Apply_42)(Prelude["<$>"](__dict_Apply_42["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_43) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_43)(Prelude["<*>"](__dict_Apply_43)(Prelude["<$>"](__dict_Apply_43["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_44) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_44)(Prelude["<$>"](__dict_Apply_44["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    return {
        lift5: lift5, 
        lift4: lift4, 
        lift3: lift3, 
        lift2: lift2, 
        "*>": $times$greater, 
        "<*": $less$times
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        Alt: Alt, 
        "<|>": $less$bar$greater
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_45) {
        return function (__dict_Lazy1_46) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_45["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_45["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_46)(function (_66) {
                    return many(__dict_Alternative_45)(__dict_Lazy1_46)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_47) {
        return function (__dict_Lazy1_48) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_47["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_47)(__dict_Lazy1_48)(v))(Prelude.pure(__dict_Alternative_47["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_49) {
        return function (_67) {
            if (_67) {
                return Prelude["return"](__dict_MonadPlus_49["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_67) {
                return Control_Plus.empty((__dict_MonadPlus_49["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    var showEither = function (__dict_Show_50) {
        return function (__dict_Show_51) {
            return new Prelude.Show(function (_74) {
                if (_74 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_50)(_74.value0) + ")");
                };
                if (_74 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_51)(_74.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var functorEither = new Prelude.Functor(function (f) {
        return function (_70) {
            if (_70 instanceof Left) {
                return new Left(_70.value0);
            };
            if (_70 instanceof Right) {
                return new Right(f(_70.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var extendEither = new Control_Extend.Extend(function (f) {
        return function (_73) {
            if (_73 instanceof Left) {
                return new Left(_73.value0);
            };
            return new Right(f(_73));
        };
    }, function () {
        return functorEither;
    });
    var eqEither = function (__dict_Eq_54) {
        return function (__dict_Eq_55) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_54)(__dict_Eq_55))(a)(b);
                };
            }, function (_75) {
                return function (_76) {
                    if (_75 instanceof Left && _76 instanceof Left) {
                        return Prelude["=="](__dict_Eq_54)(_75.value0)(_76.value0);
                    };
                    if (_75 instanceof Right && _76 instanceof Right) {
                        return Prelude["=="](__dict_Eq_55)(_75.value0)(_76.value0);
                    };
                    return false;
                };
            });
        };
    };
    var ordEither = function (__dict_Ord_52) {
        return function (__dict_Ord_53) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_52["__superclass_Prelude.Eq_0"]())(__dict_Ord_53["__superclass_Prelude.Eq_0"]());
            }, function (_77) {
                return function (_78) {
                    if (_77 instanceof Left && _78 instanceof Left) {
                        return Prelude.compare(__dict_Ord_52)(_77.value0)(_78.value0);
                    };
                    if (_77 instanceof Right && _78 instanceof Right) {
                        return Prelude.compare(__dict_Ord_53)(_77.value0)(_78.value0);
                    };
                    if (_77 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_78 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    var either = function (f) {
        return function (g) {
            return function (_69) {
                if (_69 instanceof Left) {
                    return f(_69.value0);
                };
                if (_69 instanceof Right) {
                    return g(_69.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    var applyEither = new Prelude.Apply(function (_71) {
        return function (r) {
            if (_71 instanceof Left) {
                return new Left(_71.value0);
            };
            if (_71 instanceof Right) {
                return Prelude["<$>"](functorEither)(_71.value0)(r);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_68) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    var altEither = new Control_Alt.Alt(function (_72) {
        return function (r) {
            if (_72 instanceof Left) {
                return r;
            };
            return _72;
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        isRight: isRight, 
        isLeft: isLeft, 
        either: either, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither, 
        altEither: altEither, 
        bindEither: bindEither, 
        monadEither: monadEither, 
        extendEither: extendEither, 
        showEither: showEither, 
        eqEither: eqEither, 
        ordEither: ordEither
    };
})();
var PS = PS || {};
PS.Data_Either_Nested = (function () {
    "use strict";
    var Data_Either = PS.Data_Either;
    var Prelude = PS.Prelude;
    var either9of9 = function (v) {
        return new Data_Either.Right(v);
    };
    var either9of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either8of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either8of8 = function (v) {
        return new Data_Either.Right(v);
    };
    var either8of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either7of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either7of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either7of7 = function (v) {
        return new Data_Either.Right(v);
    };
    var either7of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
    };
    var either6of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
    };
    var either6of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either6of7 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either6of6 = function (v) {
        return new Data_Either.Right(v);
    };
    var either6of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
    };
    var either5of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
    };
    var either5of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
    };
    var either5of7 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either5of6 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either5of5 = function (v) {
        return new Data_Either.Right(v);
    };
    var either5of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
    };
    var either4of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
    };
    var either4of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
    };
    var either4of7 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
    };
    var either4of6 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either4of5 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either4of4 = function (v) {
        return new Data_Either.Right(v);
    };
    var either4of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
    };
    var either3of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
    };
    var either3of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
    };
    var either3of7 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
    };
    var either3of6 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
    };
    var either3of5 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either3of4 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either3of3 = function (v) {
        return new Data_Either.Right(v);
    };
    var either3of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
    };
    var either2of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
    };
    var either2of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
    };
    var either2of7 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
    };
    var either2of6 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
    };
    var either2of5 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
    };
    var either2of4 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
    };
    var either2of3 = function (v) {
        return new Data_Either.Left(new Data_Either.Right(v));
    };
    var either2of2 = Data_Either.Right.create;
    var either2of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))))));
    };
    var either2 = Data_Either.either;
    var either3 = function (a) {
        return function (b) {
            return function (z) {
                return Data_Either.either(either2(a)(b))(z);
            };
        };
    };
    var either4 = function (a) {
        return function (b) {
            return function (c) {
                return function (z) {
                    return Data_Either.either(either3(a)(b)(c))(z);
                };
            };
        };
    };
    var either5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (z) {
                        return Data_Either.either(either4(a)(b)(c)(d))(z);
                    };
                };
            };
        };
    };
    var either6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (z) {
                            return Data_Either.either(either5(a)(b)(c)(d)(e))(z);
                        };
                    };
                };
            };
        };
    };
    var either7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (z) {
                                return Data_Either.either(either6(a)(b)(c)(d)(e)(f))(z);
                            };
                        };
                    };
                };
            };
        };
    };
    var either8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (z) {
                                    return Data_Either.either(either7(a)(b)(c)(d)(e)(f)(g))(z);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var either9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (z) {
                                        return Data_Either.either(either8(a)(b)(c)(d)(e)(f)(g)(h))(z);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var either1of9 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))))));
    };
    var either1of8 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))));
    };
    var either1of7 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))));
    };
    var either1of6 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))));
    };
    var either1of5 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))));
    };
    var either1of4 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)));
    };
    var either1of3 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(v));
    };
    var either1of2 = Data_Either.Left.create;
    var either1of10 = function (v) {
        return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))))));
    };
    var either10of10 = function (v) {
        return new Data_Either.Right(v);
    };
    var either10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (z) {
                                            return Data_Either.either(either9(a)(b)(c)(d)(e)(f)(g)(h)(i))(z);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        either10: either10, 
        either9: either9, 
        either8: either8, 
        either7: either7, 
        either6: either6, 
        either5: either5, 
        either4: either4, 
        either3: either3, 
        either2: either2, 
        either10of10: either10of10, 
        either9of10: either9of10, 
        either8of10: either8of10, 
        either7of10: either7of10, 
        either6of10: either6of10, 
        either5of10: either5of10, 
        either4of10: either4of10, 
        either3of10: either3of10, 
        either2of10: either2of10, 
        either1of10: either1of10, 
        either9of9: either9of9, 
        either8of9: either8of9, 
        either7of9: either7of9, 
        either6of9: either6of9, 
        either5of9: either5of9, 
        either4of9: either4of9, 
        either3of9: either3of9, 
        either2of9: either2of9, 
        either1of9: either1of9, 
        either8of8: either8of8, 
        either7of8: either7of8, 
        either6of8: either6of8, 
        either5of8: either5of8, 
        either4of8: either4of8, 
        either3of8: either3of8, 
        either2of8: either2of8, 
        either1of8: either1of8, 
        either7of7: either7of7, 
        either6of7: either6of7, 
        either5of7: either5of7, 
        either4of7: either4of7, 
        either3of7: either3of7, 
        either2of7: either2of7, 
        either1of7: either1of7, 
        either6of6: either6of6, 
        either5of6: either5of6, 
        either4of6: either4of6, 
        either3of6: either3of6, 
        either2of6: either2of6, 
        either1of6: either1of6, 
        either5of5: either5of5, 
        either4of5: either4of5, 
        either3of5: either3of5, 
        either2of5: either2of5, 
        either1of5: either1of5, 
        either4of4: either4of4, 
        either3of4: either3of4, 
        either2of4: either2of4, 
        either1of4: either1of4, 
        either3of3: either3of3, 
        either2of3: either2of3, 
        either1of3: either1of3, 
        either2of2: either2of2, 
        either1of2: either1of2
    };
})();
var PS = PS || {};
PS.Data_Either_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    var fromRight = function (_80) {
        if (_80 instanceof Data_Either.Right) {
            return _80.value0;
        };
        throw new Error("Failed pattern match");
    };
    var fromLeft = function (_79) {
        if (_79 instanceof Data_Either.Left) {
            return _79.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromRight: fromRight, 
        fromLeft: fromLeft
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    var showMaybe = function (__dict_Show_56) {
        return new Prelude.Show(function (_89) {
            if (_89 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_56)(_89.value0) + ")");
            };
            if (_89 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_57) {
        return new Prelude.Semigroup(function (_87) {
            return function (_88) {
                if (_87 instanceof Nothing) {
                    return _88;
                };
                if (_88 instanceof Nothing) {
                    return _87;
                };
                if (_87 instanceof Just && _88 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_57)(_87.value0)(_88.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (b) {
        return function (f) {
            return function (_81) {
                if (_81 instanceof Nothing) {
                    return b;
                };
                if (_81 instanceof Just) {
                    return f(_81.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (fn) {
        return function (_82) {
            if (_82 instanceof Just) {
                return new Just(fn(_82.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var extendMaybe = new Control_Extend.Extend(function (f) {
        return function (_86) {
            if (_86 instanceof Nothing) {
                return Nothing.value;
            };
            return new Just(f(_86));
        };
    }, function () {
        return functorMaybe;
    });
    var eqMaybe = function (__dict_Eq_59) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_59))(a)(b);
            };
        }, function (_90) {
            return function (_91) {
                if (_90 instanceof Nothing && _91 instanceof Nothing) {
                    return true;
                };
                if (_90 instanceof Just && _91 instanceof Just) {
                    return Prelude["=="](__dict_Eq_59)(_90.value0)(_91.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_58) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_58["__superclass_Prelude.Eq_0"]());
        }, function (_92) {
            return function (_93) {
                if (_92 instanceof Just && _93 instanceof Just) {
                    return Prelude.compare(__dict_Ord_58)(_92.value0)(_93.value0);
                };
                if (_92 instanceof Nothing && _93 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_92 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_93 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = new Prelude.Apply(function (_83) {
        return function (x) {
            if (_83 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_83.value0)(x);
            };
            if (_83 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_85) {
        return function (k) {
            if (_85 instanceof Just) {
                return k(_85.value0);
            };
            if (_85 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_84) {
        return function (r) {
            if (_84 instanceof Nothing) {
                return r;
            };
            return _84;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        isNothing: isNothing, 
        isJust: isJust, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        applicativeMaybe: applicativeMaybe, 
        altMaybe: altMaybe, 
        plusMaybe: plusMaybe, 
        alternativeMaybe: alternativeMaybe, 
        bindMaybe: bindMaybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        extendMaybe: extendMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe, 
        eqMaybe: eqMaybe, 
        ordMaybe: ordMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    
function replicate(nn) {
  return function(v) {
    var n = nn > 0? nn : 0;
    var r = new Array(n);
    for (var i = 0; i < n; i++)
      r[i] = v;
    return r;
   };
}
;
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            var _442 = n < 0 || (n >= length(xs) || isInt(n));
            if (_442) {
                return Data_Maybe.Nothing.value;
            };
            if (!_442) {
                return new Data_Maybe.Just(xs[n]);
            };
            throw new Error("Failed pattern match");
        };
    };
    var take = function (n) {
        return slice(0)(n);
    };
    var tail = function (_94) {
        if (_94.length >= 1) {
            var _445 = _94.slice(1);
            return new Data_Maybe.Just(_445);
        };
        return Data_Maybe.Nothing.value;
    };
    var span = (function () {
        var go = function (__copy_acc) {
            return function (__copy_p) {
                return function (__copy__104) {
                    var acc = __copy_acc;
                    var p = __copy_p;
                    var _104 = __copy__104;
                    tco: while (true) {
                        if (_104.length >= 1) {
                            var _450 = _104.slice(1);
                            if (p(_104[0])) {
                                var __tco_acc = Prelude[":"](_104[0])(acc);
                                var __tco_p = p;
                                acc = __tco_acc;
                                p = __tco_p;
                                _104 = _450;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(acc), 
                            rest: _104
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    var takeWhile = function (p) {
        return function (xs) {
            return (span(p)(xs)).init;
        };
    };
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _451 = comp(x)(y);
                    if (_451 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_451 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_451 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_60) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_60))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var $$null = function (_96) {
        if (_96.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function ($eq$eq) {
        return function (_100) {
            if (_100.length === 0) {
                return [  ];
            };
            if (_100.length >= 1) {
                var _456 = _100.slice(1);
                return Prelude[":"](_100[0])(nubBy($eq$eq)(filter(function (y) {
                    return !$eq$eq(_100[0])(y);
                })(_456)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_61) {
        return nubBy(Prelude["=="](__dict_Eq_61));
    };
    var modifyAt = function (i) {
        return function (f) {
            return function (xs) {
                var _457 = $bang$bang(xs)(i);
                if (_457 instanceof Data_Maybe.Just) {
                    return updateAt(i)(f(_457.value0))(xs);
                };
                if (_457 instanceof Data_Maybe.Nothing) {
                    return xs;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var last = function (xs) {
        return $bang$bang(xs)(length(xs) - 1);
    };
    var intersectBy = function (eq) {
        return function (_98) {
            return function (_99) {
                if (_98.length === 0) {
                    return [  ];
                };
                if (_99.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(eq(x))(_99) >= 0;
                };
                return filter(el)(_98);
            };
        };
    };
    var intersect = function (__dict_Eq_62) {
        return intersectBy(Prelude["=="](__dict_Eq_62));
    };
    var init = function (_95) {
        if (_95.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_95) - 1)(_95));
    };
    var head = function (xs) {
        return $bang$bang(xs)(0);
    };
    var groupBy = (function () {
        var go = function (__copy_acc) {
            return function (__copy_op) {
                return function (__copy__103) {
                    var acc = __copy_acc;
                    var op = __copy_op;
                    var _103 = __copy__103;
                    tco: while (true) {
                        if (_103.length === 0) {
                            return reverse(acc);
                        };
                        if (_103.length >= 1) {
                            var _467 = _103.slice(1);
                            var sp = span(op(_103[0]))(_467);
                            var __tco_acc = Prelude[":"](Prelude[":"](_103[0])(sp.init))(acc);
                            var __tco_op = op;
                            acc = __tco_acc;
                            op = __tco_op;
                            _103 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var group = function (__dict_Eq_63) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_63))(xs);
        };
    };
    var group$prime = function (__dict_Ord_64) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_64["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_64));
    };
    var functorArray = new Prelude.Functor(map);
    var elemLastIndex = function (__dict_Eq_65) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_65)(x));
        };
    };
    var elemIndex = function (__dict_Eq_66) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_66)(x));
        };
    };
    var dropWhile = function (p) {
        return function (xs) {
            return (span(p)(xs)).rest;
        };
    };
    var deleteBy = function (eq) {
        return function (x) {
            return function (_97) {
                if (_97.length === 0) {
                    return [  ];
                };
                var _471 = findIndex(eq(x))(_97);
                if (_471 < 0) {
                    return _97;
                };
                return deleteAt(_471)(1)(_97);
            };
        };
    };
    var $$delete = function (__dict_Eq_67) {
        return deleteBy(Prelude["=="](__dict_Eq_67));
    };
    var $bslash$bslash = function (__dict_Eq_68) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__101) {
                    return function (__copy__102) {
                        var _101 = __copy__101;
                        var _102 = __copy__102;
                        tco: while (true) {
                            if (_102.length === 0) {
                                return _101;
                            };
                            if (_101.length === 0) {
                                return [  ];
                            };
                            if (_102.length >= 1) {
                                var _475 = _102.slice(1);
                                var __tco__101 = $$delete(__dict_Eq_68)(_102[0])(_101);
                                _101 = __tco__101;
                                _102 = _475;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        replicate: replicate, 
        takeWhile: takeWhile, 
        dropWhile: dropWhile, 
        span: span, 
        groupBy: groupBy, 
        "group'": group$prime, 
        group: group, 
        sortBy: sortBy, 
        sort: sort, 
        nubBy: nubBy, 
        nub: nub, 
        zipWith: zipWith, 
        range: range, 
        filter: filter, 
        concatMap: concatMap, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        "\\\\": $bslash$bslash, 
        "delete": $$delete, 
        deleteBy: deleteBy, 
        modifyAt: modifyAt, 
        updateAt: updateAt, 
        deleteAt: deleteAt, 
        insertAt: insertAt, 
        take: take, 
        drop: drop, 
        reverse: reverse, 
        concat: concat, 
        append: append, 
        elemLastIndex: elemLastIndex, 
        elemIndex: elemIndex, 
        findLastIndex: findLastIndex, 
        findIndex: findIndex, 
        length: length, 
        catMaybes: catMaybes, 
        mapMaybe: mapMaybe, 
        map: map, 
        "null": $$null, 
        init: init, 
        tail: tail, 
        last: last, 
        head: head, 
        singleton: singleton, 
        snoc: snoc, 
        "..": $dot$dot, 
        "!!": $bang$bang, 
        functorArray: functorArray, 
        applyArray: applyArray, 
        applicativeArray: applicativeArray, 
        bindArray: bindArray, 
        monadArray: monadArray, 
        semigroupArray: semigroupArray, 
        altArray: altArray, 
        plusArray: plusArray, 
        alternativeArray: alternativeArray, 
        monadPlusArray: monadPlusArray
    };
})();
var PS = PS || {};
PS.Data_Array_ST = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    
  function runSTArray(f) {
    return f;
  };
    
  function emptySTArray() {
    return [];
  };
    
  function peekSTArrayImpl(just, nothing, arr, i) {
    return function() {
      var index = i >>> 0;
      return index < arr.length? just(arr[index]) : nothing;
    };
  };
    
  function pokeSTArrayImpl(arr, i, a) {
    return function() {
      var index = i >>> 0;
      var ret = index < arr.length;
      if (ret)
        arr[index] = a;
      return ret;
    };
  };
    
  function pushAllSTArrayImpl(arr, as) {
    return function(){
      return arr.push.apply(arr, as);
    };
  };
    
  function spliceSTArrayImpl(arr, index, howMany, bs) {
    return function(){
      return arr.splice.apply(arr, [index, howMany].concat(bs));
    };
  };
    
  function copyImpl(arr) {
    return function(){
      return arr.slice();
    };
  };
    
  function toAssocArray(arr) {
    return function(){
      var n = arr.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++)
        as[i] = {value: arr[i], index: i};
      return as;
    };
  };
    var thaw = copyImpl;
    var spliceSTArray = Data_Function.runFn4(spliceSTArrayImpl);
    var pushAllSTArray = Data_Function.runFn2(pushAllSTArrayImpl);
    var pushSTArray = function (arr) {
        return function (a) {
            return pushAllSTArray(arr)([ a ]);
        };
    };
    var pokeSTArray = Data_Function.runFn3(pokeSTArrayImpl);
    var peekSTArray = Data_Function.runFn4(peekSTArrayImpl)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var freeze = copyImpl;
    return {
        toAssocArray: toAssocArray, 
        thaw: thaw, 
        freeze: freeze, 
        spliceSTArray: spliceSTArray, 
        pushAllSTArray: pushAllSTArray, 
        pushSTArray: pushSTArray, 
        pokeSTArray: pokeSTArray, 
        peekSTArray: peekSTArray, 
        emptySTArray: emptySTArray, 
        runSTArray: runSTArray
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_105) {
        if (_105 instanceof Data_Maybe.Just) {
            return _105.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var tail = function (_106) {
        if (_106.length >= 1) {
            var _480 = _106.slice(1);
            return _480;
        };
        throw new Error("Failed pattern match");
    };
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    var head = function (xs) {
        return xs[0];
    };
    return {
        init: init, 
        last: last, 
        tail: tail, 
        head: head
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = new Monoid(function () {
        return Prelude.semigroupUnit;
    }, Prelude.unit);
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_69) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_69);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_70) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_70["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_70)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidString: monoidString, 
        monoidArray: monoidArray, 
        monoidUnit: monoidUnit, 
        monoidArr: monoidArr, 
        monoidMaybe: monoidMaybe
    };
})();
var PS = PS || {};
PS.Data_Monoid_Additive = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Monoid = PS.Data_Monoid;
    var Additive = function (x) {
        return x;
    };
    var showAdditive = function (__dict_Show_71) {
        return new Prelude.Show(function (_118) {
            return "Additive (" + (Prelude.show(__dict_Show_71)(_118) + ")");
        });
    };
    var semigroupAdditive = function (__dict_Semiring_72) {
        return new Prelude.Semigroup(function (_119) {
            return function (_120) {
                return Prelude["+"](__dict_Semiring_72)(_119)(_120);
            };
        });
    };
    var runAdditive = function (_107) {
        return _107;
    };
    var monoidAdditive = function (__dict_Semiring_74) {
        return new Data_Monoid.Monoid(function () {
            return semigroupAdditive(__dict_Semiring_74);
        }, Prelude.zero(__dict_Semiring_74));
    };
    var functorAdditive = new Prelude.Functor(function (f) {
        return function (_114) {
            return f(_114);
        };
    });
    var extendAdditive = new Control_Extend.Extend(function (f) {
        return function (x) {
            return f(x);
        };
    }, function () {
        return functorAdditive;
    });
    var eqAdditive = function (__dict_Eq_75) {
        return new Prelude.Eq(function (_110) {
            return function (_111) {
                return Prelude["/="](__dict_Eq_75)(_110)(_111);
            };
        }, function (_108) {
            return function (_109) {
                return Prelude["=="](__dict_Eq_75)(_108)(_109);
            };
        });
    };
    var ordAdditive = function (__dict_Ord_73) {
        return new Prelude.Ord(function () {
            return eqAdditive(__dict_Ord_73["__superclass_Prelude.Eq_0"]());
        }, function (_112) {
            return function (_113) {
                return Prelude.compare(__dict_Ord_73)(_112)(_113);
            };
        });
    };
    var comonadAdditive = new Control_Comonad.Comonad(function () {
        return extendAdditive;
    }, runAdditive);
    var applyAdditive = new Prelude.Apply(function (_115) {
        return function (_116) {
            return _115(_116);
        };
    }, function () {
        return functorAdditive;
    });
    var bindAdditive = new Prelude.Bind(function (_117) {
        return function (f) {
            return f(_117);
        };
    }, function () {
        return applyAdditive;
    });
    var applicativeAdditive = new Prelude.Applicative(function () {
        return applyAdditive;
    }, Additive);
    var monadAdditive = new Prelude.Monad(function () {
        return applicativeAdditive;
    }, function () {
        return bindAdditive;
    });
    return {
        Additive: Additive, 
        runAdditive: runAdditive, 
        eqAdditive: eqAdditive, 
        ordAdditive: ordAdditive, 
        functorAdditive: functorAdditive, 
        applyAdditive: applyAdditive, 
        applicativeAdditive: applicativeAdditive, 
        bindAdditive: bindAdditive, 
        monadAdditive: monadAdditive, 
        extendAdditive: extendAdditive, 
        comonadAdditive: comonadAdditive, 
        showAdditive: showAdditive, 
        semigroupAdditive: semigroupAdditive, 
        monoidAdditive: monoidAdditive
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var All = function (x) {
        return x;
    };
    var showAll = new Prelude.Show(function (_128) {
        return "All (" + (Prelude.show(Prelude.showBoolean)(_128) + ")");
    });
    var semigroupAll = new Prelude.Semigroup(function (_129) {
        return function (_130) {
            return _129 && _130;
        };
    });
    var runAll = function (_121) {
        return _121;
    };
    var monoidAll = new Data_Monoid.Monoid(function () {
        return semigroupAll;
    }, true);
    var eqAll = new Prelude.Eq(function (_124) {
        return function (_125) {
            return _124 !== _125;
        };
    }, function (_122) {
        return function (_123) {
            return _122 === _123;
        };
    });
    var ordAll = new Prelude.Ord(function () {
        return eqAll;
    }, function (_126) {
        return function (_127) {
            return Prelude.compare(Prelude.ordBoolean)(_126)(_127);
        };
    });
    return {
        All: All, 
        runAll: runAll, 
        eqAll: eqAll, 
        ordAll: ordAll, 
        showAll: showAll, 
        semigroupAll: semigroupAll, 
        monoidAll: monoidAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Any = function (x) {
        return x;
    };
    var showAny = new Prelude.Show(function (_138) {
        return "Any (" + (Prelude.show(Prelude.showBoolean)(_138) + ")");
    });
    var semigroupAny = new Prelude.Semigroup(function (_139) {
        return function (_140) {
            return _139 || _140;
        };
    });
    var runAny = function (_131) {
        return _131;
    };
    var monoidAny = new Data_Monoid.Monoid(function () {
        return semigroupAny;
    }, false);
    var eqAny = new Prelude.Eq(function (_134) {
        return function (_135) {
            return _134 !== _135;
        };
    }, function (_132) {
        return function (_133) {
            return _132 === _133;
        };
    });
    var ordAny = new Prelude.Ord(function () {
        return eqAny;
    }, function (_136) {
        return function (_137) {
            return Prelude.compare(Prelude.ordBoolean)(_136)(_137);
        };
    });
    return {
        Any: Any, 
        runAny: runAny, 
        eqAny: eqAny, 
        ordAny: ordAny, 
        showAny: showAny, 
        semigroupAny: semigroupAny, 
        monoidAny: monoidAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Dual = function (x) {
        return x;
    };
    var showDual = function (__dict_Show_76) {
        return new Prelude.Show(function (_152) {
            return "Dual (" + (Prelude.show(__dict_Show_76)(_152) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_77) {
        return new Prelude.Semigroup(function (_153) {
            return function (_154) {
                return Prelude["<>"](__dict_Semigroup_77)(_154)(_153);
            };
        });
    };
    var runDual = function (_141) {
        return _141;
    };
    var monoidDual = function (__dict_Monoid_79) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_79["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_79));
    };
    var functorDual = new Prelude.Functor(function (f) {
        return function (_148) {
            return f(_148);
        };
    });
    var extendDual = new Control_Extend.Extend(function (f) {
        return function (x) {
            return f(x);
        };
    }, function () {
        return functorDual;
    });
    var eqDual = function (__dict_Eq_80) {
        return new Prelude.Eq(function (_144) {
            return function (_145) {
                return Prelude["/="](__dict_Eq_80)(_144)(_145);
            };
        }, function (_142) {
            return function (_143) {
                return Prelude["=="](__dict_Eq_80)(_142)(_143);
            };
        });
    };
    var ordDual = function (__dict_Ord_78) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_78["__superclass_Prelude.Eq_0"]());
        }, function (_146) {
            return function (_147) {
                return Prelude.compare(__dict_Ord_78)(_146)(_147);
            };
        });
    };
    var comonadDual = new Control_Comonad.Comonad(function () {
        return extendDual;
    }, runDual);
    var applyDual = new Prelude.Apply(function (_149) {
        return function (_150) {
            return _149(_150);
        };
    }, function () {
        return functorDual;
    });
    var bindDual = new Prelude.Bind(function (_151) {
        return function (f) {
            return f(_151);
        };
    }, function () {
        return applyDual;
    });
    var applicativeDual = new Prelude.Applicative(function () {
        return applyDual;
    }, Dual);
    var monadDual = new Prelude.Monad(function () {
        return applicativeDual;
    }, function () {
        return bindDual;
    });
    return {
        Dual: Dual, 
        runDual: runDual, 
        eqDual: eqDual, 
        ordDual: ordDual, 
        functorDual: functorDual, 
        applyDual: applyDual, 
        applicativeDual: applicativeDual, 
        bindDual: bindDual, 
        monadDual: monadDual, 
        extendDual: extendDual, 
        comonadDual: comonadDual, 
        showDual: showDual, 
        semigroupDual: semigroupDual, 
        monoidDual: monoidDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Endo = function (x) {
        return x;
    };
    var semigroupEndo = new Prelude.Semigroup(function (_156) {
        return function (_157) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(_156)(_157);
        };
    });
    var runEndo = function (_155) {
        return _155;
    };
    var monoidEndo = new Data_Monoid.Monoid(function () {
        return semigroupEndo;
    }, Prelude.id(Prelude.categoryArr));
    return {
        Endo: Endo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo, 
        monoidEndo: monoidEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Multiplicative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Monoid = PS.Data_Monoid;
    var Multiplicative = function (x) {
        return x;
    };
    var showMultiplicative = function (__dict_Show_81) {
        return new Prelude.Show(function (_169) {
            return "Multiplicative (" + (Prelude.show(__dict_Show_81)(_169) + ")");
        });
    };
    var semigroupMultiplicative = function (__dict_Semiring_82) {
        return new Prelude.Semigroup(function (_170) {
            return function (_171) {
                return Prelude["*"](__dict_Semiring_82)(_170)(_171);
            };
        });
    };
    var runMultiplicative = function (_158) {
        return _158;
    };
    var monoidMultiplicative = function (__dict_Semiring_84) {
        return new Data_Monoid.Monoid(function () {
            return semigroupMultiplicative(__dict_Semiring_84);
        }, Prelude.one(__dict_Semiring_84));
    };
    var functorMultiplicative = new Prelude.Functor(function (f) {
        return function (_165) {
            return f(_165);
        };
    });
    var extendAdditive = new Control_Extend.Extend(function (f) {
        return function (x) {
            return f(x);
        };
    }, function () {
        return functorMultiplicative;
    });
    var eqMultiplicative = function (__dict_Eq_85) {
        return new Prelude.Eq(function (_161) {
            return function (_162) {
                return Prelude["/="](__dict_Eq_85)(_161)(_162);
            };
        }, function (_159) {
            return function (_160) {
                return Prelude["=="](__dict_Eq_85)(_159)(_160);
            };
        });
    };
    var ordMultiplicative = function (__dict_Ord_83) {
        return new Prelude.Ord(function () {
            return eqMultiplicative(__dict_Ord_83["__superclass_Prelude.Eq_0"]());
        }, function (_163) {
            return function (_164) {
                return Prelude.compare(__dict_Ord_83)(_163)(_164);
            };
        });
    };
    var comonadAdditive = new Control_Comonad.Comonad(function () {
        return extendAdditive;
    }, runMultiplicative);
    var applyMultiplicative = new Prelude.Apply(function (_166) {
        return function (_167) {
            return _166(_167);
        };
    }, function () {
        return functorMultiplicative;
    });
    var bindMultiplicative = new Prelude.Bind(function (_168) {
        return function (f) {
            return f(_168);
        };
    }, function () {
        return applyMultiplicative;
    });
    var applicativeMultiplicative = new Prelude.Applicative(function () {
        return applyMultiplicative;
    }, Multiplicative);
    var monadMultiplicative = new Prelude.Monad(function () {
        return applicativeMultiplicative;
    }, function () {
        return bindMultiplicative;
    });
    return {
        Multiplicative: Multiplicative, 
        runMultiplicative: runMultiplicative, 
        eqMultiplicative: eqMultiplicative, 
        ordMultiplicative: ordMultiplicative, 
        functorMultiplicative: functorMultiplicative, 
        applyMultiplicative: applyMultiplicative, 
        applicativeMultiplicative: applicativeMultiplicative, 
        bindMultiplicative: bindMultiplicative, 
        monadMultiplicative: monadMultiplicative, 
        extendAdditive: extendAdditive, 
        comonadAdditive: comonadAdditive, 
        showMultiplicative: showMultiplicative, 
        semigroupMultiplicative: semigroupMultiplicative, 
        monoidMultiplicative: monoidMultiplicative
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_181) {
        if (_181.length >= 1) {
            var _559 = _181.slice(1);
            var _553 = unzip(_559);
            return new Tuple(Prelude[":"]((_181[0]).value0)(_553.value0), Prelude[":"]((_181[0]).value1)(_553.value1));
        };
        if (_181.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (f) {
        return function (_180) {
            return f(_180.value0)(_180.value1);
        };
    };
    var swap = function (_182) {
        return new Tuple(_182.value1, _182.value0);
    };
    var snd = function (_179) {
        return _179.value1;
    };
    var showTuple = function (__dict_Show_86) {
        return function (__dict_Show_87) {
            return new Prelude.Show(function (_183) {
                return "Tuple (" + (Prelude.show(__dict_Show_86)(_183.value0) + (") (" + (Prelude.show(__dict_Show_87)(_183.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = new Prelude.Semigroupoid(function (_188) {
        return function (_189) {
            return new Tuple(_189.value0, _188.value1);
        };
    });
    var semigroupTuple = function (__dict_Semigroup_88) {
        return function (__dict_Semigroup_89) {
            return new Prelude.Semigroup(function (_190) {
                return function (_191) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_88)(_190.value0)(_191.value0), Prelude["<>"](__dict_Semigroup_89)(_190.value1)(_191.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_92) {
        return function (__dict_Monoid_93) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_92["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_93["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_92), Data_Monoid.mempty(__dict_Monoid_93)));
        };
    };
    var functorTuple = new Prelude.Functor(function (f) {
        return function (_192) {
            return new Tuple(_192.value0, f(_192.value1));
        };
    });
    var fst = function (_178) {
        return _178.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_95) {
        return function (__dict_Lazy1_96) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_95)(function (_174) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_96)(function (_175) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_97) {
        return function (__dict_Lazy2_98) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_97)(function (_176) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_98)(function (_177) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_99) {
        return function (__dict_Lazy_100) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_99)(function (_172) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_100)(function (_173) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = new Control_Extend.Extend(function (f) {
        return function (_196) {
            return new Tuple(_196.value0, f(_196));
        };
    }, function () {
        return functorTuple;
    });
    var eqTuple = function (__dict_Eq_101) {
        return function (__dict_Eq_102) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_101)(__dict_Eq_102))(t1)(t2);
                };
            }, function (_184) {
                return function (_185) {
                    return Prelude["=="](__dict_Eq_101)(_184.value0)(_185.value0) && Prelude["=="](__dict_Eq_102)(_184.value1)(_185.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_90) {
        return function (__dict_Ord_91) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_90["__superclass_Prelude.Eq_0"]())(__dict_Ord_91["__superclass_Prelude.Eq_0"]());
            }, function (_186) {
                return function (_187) {
                    var _610 = Prelude.compare(__dict_Ord_90)(_186.value0)(_187.value0);
                    if (_610 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_91)(_186.value1)(_187.value1);
                    };
                    return _610;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = new Control_Comonad.Comonad(function () {
        return extendTuple;
    }, snd);
    var applyTuple = function (__dict_Semigroup_104) {
        return new Prelude.Apply(function (_193) {
            return function (_194) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_104)(_193.value0)(_194.value0), _193.value1(_194.value1));
            };
        }, function () {
            return functorTuple;
        });
    };
    var bindTuple = function (__dict_Semigroup_103) {
        return new Prelude.Bind(function (_195) {
            return function (f) {
                var _623 = f(_195.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_103)(_195.value0)(_623.value0), _623.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_103);
        });
    };
    var applicativeTuple = function (__dict_Monoid_105) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_105["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_105)));
    };
    var monadTuple = function (__dict_Monoid_94) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_94);
        }, function () {
            return bindTuple(__dict_Monoid_94["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        swap: swap, 
        unzip: unzip, 
        zip: zip, 
        uncurry: uncurry, 
        curry: curry, 
        snd: snd, 
        fst: fst, 
        showTuple: showTuple, 
        eqTuple: eqTuple, 
        ordTuple: ordTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        semigroupTuple: semigroupTuple, 
        monoidTuple: monoidTuple, 
        functorTuple: functorTuple, 
        applyTuple: applyTuple, 
        applicativeTuple: applicativeTuple, 
        bindTuple: bindTuple, 
        monadTuple: monadTuple, 
        extendTuple: extendTuple, 
        comonadTuple: comonadTuple, 
        lazyTuple: lazyTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple
    };
})();
var PS = PS || {};
PS.Data_Tuple_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var $div$bslash = function (a) {
        return function (b) {
            return new Data_Tuple.Tuple(a, b);
        };
    };
    var uncurry9 = function (f$prime) {
        return function (_204) {
            return f$prime(_204.value0.value0.value0.value0.value0.value0.value0.value0)(_204.value0.value0.value0.value0.value0.value0.value0.value1)(_204.value0.value0.value0.value0.value0.value0.value1)(_204.value0.value0.value0.value0.value0.value1)(_204.value0.value0.value0.value0.value1)(_204.value0.value0.value0.value1)(_204.value0.value0.value1)(_204.value0.value1)(_204.value1);
        };
    };
    var uncurry8 = function (f$prime) {
        return function (_203) {
            return f$prime(_203.value0.value0.value0.value0.value0.value0.value0)(_203.value0.value0.value0.value0.value0.value0.value1)(_203.value0.value0.value0.value0.value0.value1)(_203.value0.value0.value0.value0.value1)(_203.value0.value0.value0.value1)(_203.value0.value0.value1)(_203.value0.value1)(_203.value1);
        };
    };
    var uncurry7 = function (f$prime) {
        return function (_202) {
            return f$prime(_202.value0.value0.value0.value0.value0.value0)(_202.value0.value0.value0.value0.value0.value1)(_202.value0.value0.value0.value0.value1)(_202.value0.value0.value0.value1)(_202.value0.value0.value1)(_202.value0.value1)(_202.value1);
        };
    };
    var uncurry6 = function (f$prime) {
        return function (_201) {
            return f$prime(_201.value0.value0.value0.value0.value0)(_201.value0.value0.value0.value0.value1)(_201.value0.value0.value0.value1)(_201.value0.value0.value1)(_201.value0.value1)(_201.value1);
        };
    };
    var uncurry5 = function (f) {
        return function (_200) {
            return f(_200.value0.value0.value0.value0)(_200.value0.value0.value0.value1)(_200.value0.value0.value1)(_200.value0.value1)(_200.value1);
        };
    };
    var uncurry4 = function (f) {
        return function (_199) {
            return f(_199.value0.value0.value0)(_199.value0.value0.value1)(_199.value0.value1)(_199.value1);
        };
    };
    var uncurry3 = function (f) {
        return function (_198) {
            return f(_198.value0.value0)(_198.value0.value1)(_198.value1);
        };
    };
    var uncurry2 = function (f) {
        return function (_197) {
            return f(_197.value0)(_197.value1);
        };
    };
    var uncurry10 = function (f$prime) {
        return function (_205) {
            return f$prime(_205.value0.value0.value0.value0.value0.value0.value0.value0.value0)(_205.value0.value0.value0.value0.value0.value0.value0.value0.value1)(_205.value0.value0.value0.value0.value0.value0.value0.value1)(_205.value0.value0.value0.value0.value0.value0.value1)(_205.value0.value0.value0.value0.value0.value1)(_205.value0.value0.value0.value0.value1)(_205.value0.value0.value0.value1)(_205.value0.value0.value1)(_205.value0.value1)(_205.value1);
        };
    };
    var tuple9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var tuple8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var tuple7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g);
                            };
                        };
                    };
                };
            };
        };
    };
    var tuple6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f);
                        };
                    };
                };
            };
        };
    };
    var tuple5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e);
                    };
                };
            };
        };
    };
    var tuple4 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
                };
            };
        };
    };
    var tuple3 = function (a) {
        return function (b) {
            return function (c) {
                return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
            };
        };
    };
    var tuple2 = Data_Tuple.Tuple.create;
    var tuple10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var curry9 = function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var curry8 = function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var curry7 = function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var curry6 = function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f));
                            };
                        };
                    };
                };
            };
        };
    };
    var curry5 = function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e));
                        };
                    };
                };
            };
        };
    };
    var curry4 = function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d));
                    };
                };
            };
        };
    };
    var curry3 = function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c));
                };
            };
        };
    };
    var curry2 = function (f) {
        return function (a) {
            return function (b) {
                return f(new Data_Tuple.Tuple(a, b));
            };
        };
    };
    var curry10 = function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return function (j) {
                                                return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j));
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        "/\\": $div$bslash, 
        curry10: curry10, 
        uncurry10: uncurry10, 
        curry9: curry9, 
        uncurry9: uncurry9, 
        curry8: curry8, 
        uncurry8: uncurry8, 
        curry7: curry7, 
        uncurry7: uncurry7, 
        curry6: curry6, 
        uncurry6: uncurry6, 
        curry5: curry5, 
        uncurry5: uncurry5, 
        curry4: curry4, 
        uncurry4: uncurry4, 
        curry3: curry3, 
        uncurry3: uncurry3, 
        curry2: curry2, 
        uncurry2: uncurry2, 
        tuple10: tuple10, 
        tuple9: tuple9, 
        tuple8: tuple8, 
        tuple7: tuple7, 
        tuple6: tuple6, 
        tuple5: tuple5, 
        tuple4: tuple4, 
        tuple3: tuple3, 
        tuple2: tuple2
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var First = function (x) {
        return x;
    };
    var showFirst = function (__dict_Show_106) {
        return new Prelude.Show(function (_217) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_106))(_217) + ")");
        });
    };
    var semigroupFirst = new Prelude.Semigroup(function (_218) {
        return function (second) {
            if (_218 instanceof Data_Maybe.Just) {
                return _218;
            };
            return second;
        };
    });
    var runFirst = function (_206) {
        return _206;
    };
    var monoidFirst = new Data_Monoid.Monoid(function () {
        return semigroupFirst;
    }, Data_Maybe.Nothing.value);
    var functorFirst = new Prelude.Functor(function (f) {
        return function (_213) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_213);
        };
    });
    var extendFirst = new Control_Extend.Extend(function (f) {
        return function (x) {
            return Control_Extend["<<="](extendFirst)(f)(x);
        };
    }, function () {
        return functorFirst;
    });
    var eqFirst = function (__dict_Eq_108) {
        return new Prelude.Eq(function (_209) {
            return function (_210) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_108))(_209)(_210);
            };
        }, function (_207) {
            return function (_208) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_108))(_207)(_208);
            };
        });
    };
    var ordFirst = function (__dict_Ord_107) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_107["__superclass_Prelude.Eq_0"]());
        }, function (_211) {
            return function (_212) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_107))(_211)(_212);
            };
        });
    };
    var applyFirst = new Prelude.Apply(function (_214) {
        return function (_215) {
            return Prelude["<*>"](Data_Maybe.applyMaybe)(_214)(_215);
        };
    }, function () {
        return functorFirst;
    });
    var bindFirst = new Prelude.Bind(function (_216) {
        return function (f) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(_216)(Prelude["<<<"](Prelude.semigroupoidArr)(runFirst)(f));
        };
    }, function () {
        return applyFirst;
    });
    var applicativeFirst = new Prelude.Applicative(function () {
        return applyFirst;
    }, Prelude["<<<"](Prelude.semigroupoidArr)(First)(Prelude.pure(Data_Maybe.applicativeMaybe)));
    var monadFirst = new Prelude.Monad(function () {
        return applicativeFirst;
    }, function () {
        return bindFirst;
    });
    return {
        First: First, 
        runFirst: runFirst, 
        eqFirst: eqFirst, 
        ordFirst: ordFirst, 
        functorFirst: functorFirst, 
        applyFirst: applyFirst, 
        applicativeFirst: applicativeFirst, 
        bindFirst: bindFirst, 
        monadFirst: monadFirst, 
        extendFirst: extendFirst, 
        showFirst: showFirst, 
        semigroupFirst: semigroupFirst, 
        monoidFirst: monoidFirst
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Last = function (x) {
        return x;
    };
    var showLast = function (__dict_Show_109) {
        return new Prelude.Show(function (_230) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_109))(_230) + ")");
        });
    };
    var semigroupLast = new Prelude.Semigroup(function (last) {
        return function (_231) {
            if (_231 instanceof Data_Maybe.Just) {
                return _231;
            };
            if (_231 instanceof Data_Maybe.Nothing) {
                return last;
            };
            throw new Error("Failed pattern match");
        };
    });
    var runLast = function (_219) {
        return _219;
    };
    var monoidLast = new Data_Monoid.Monoid(function () {
        return semigroupLast;
    }, Data_Maybe.Nothing.value);
    var functorLast = new Prelude.Functor(function (f) {
        return function (_226) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_226);
        };
    });
    var extendLast = new Control_Extend.Extend(function (f) {
        return function (x) {
            return Control_Extend["<<="](extendLast)(f)(x);
        };
    }, function () {
        return functorLast;
    });
    var eqLast = function (__dict_Eq_111) {
        return new Prelude.Eq(function (_222) {
            return function (_223) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_111))(_222)(_223);
            };
        }, function (_220) {
            return function (_221) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_111))(_220)(_221);
            };
        });
    };
    var ordLast = function (__dict_Ord_110) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_110["__superclass_Prelude.Eq_0"]());
        }, function (_224) {
            return function (_225) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_110))(_224)(_225);
            };
        });
    };
    var applyLast = new Prelude.Apply(function (_227) {
        return function (_228) {
            return Prelude["<*>"](Data_Maybe.applyMaybe)(_227)(_228);
        };
    }, function () {
        return functorLast;
    });
    var bindLast = new Prelude.Bind(function (_229) {
        return function (f) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(_229)(Prelude["<<<"](Prelude.semigroupoidArr)(runLast)(f));
        };
    }, function () {
        return applyLast;
    });
    var applicativeLast = new Prelude.Applicative(function () {
        return applyLast;
    }, Prelude["<<<"](Prelude.semigroupoidArr)(Last)(Prelude.pure(Data_Maybe.applicativeMaybe)));
    var monadLast = new Prelude.Monad(function () {
        return applicativeLast;
    }, function () {
        return bindLast;
    });
    return {
        Last: Last, 
        runLast: runLast, 
        eqLast: eqLast, 
        ordLast: ordLast, 
        functorLast: functorLast, 
        applyLast: applyLast, 
        applicativeLast: applicativeLast, 
        bindLast: bindLast, 
        monadLast: monadLast, 
        extendLast: extendLast, 
        showLast: showLast, 
        semigroupLast: semigroupLast, 
        monoidLast: monoidLast
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_112) {
        return function (__dict_Foldable_113) {
            return function (f) {
                return foldr(__dict_Foldable_113)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_112["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_112)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_114) {
        return function (__dict_Foldable_115) {
            return Prelude.flip(traverse_(__dict_Applicative_114)(__dict_Foldable_115));
        };
    };
    var sequence_ = function (__dict_Applicative_116) {
        return function (__dict_Foldable_117) {
            return traverse_(__dict_Applicative_116)(__dict_Foldable_117)(Prelude.id(Prelude.categoryArr));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_118) {
        return function (__dict_Monoid_119) {
            return function (sep) {
                return function (xs) {
                    var go = function (_257) {
                        return function (x) {
                            if (_257.init) {
                                return {
                                    init: false, 
                                    acc: x
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_119["__superclass_Prelude.Semigroup_0"]())(_257.acc)(Prelude["<>"](__dict_Monoid_119["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_118)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_119)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_120) {
        return function (__dict_Monoid_121) {
            return foldl(__dict_Foldable_120)(Prelude["<>"](__dict_Monoid_121["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_121));
        };
    };
    var or = function (__dict_Foldable_122) {
        return foldl(__dict_Foldable_122)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var product = function (__dict_Foldable_123) {
        return foldl(__dict_Foldable_123)(Prelude["*"](Prelude.semiringNumber))(1);
    };
    var sum = function (__dict_Foldable_124) {
        return foldl(__dict_Foldable_124)(Prelude["+"](Prelude.semiringNumber))(0);
    };
    var foldableTuple = new Foldable(function (__dict_Monoid_125) {
        return function (f) {
            return function (_241) {
                return f(_241.value1);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_240) {
                return f(z)(_240.value1);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_239) {
                return f(_239.value1)(z);
            };
        };
    });
    var foldableMultiplicative = new Foldable(function (__dict_Monoid_126) {
        return function (f) {
            return function (_256) {
                return f(_256);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_255) {
                return f(z)(_255);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_254) {
                return f(_254)(z);
            };
        };
    });
    var foldableMaybe = new Foldable(function (__dict_Monoid_127) {
        return function (f) {
            return function (_238) {
                if (_238 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_127);
                };
                if (_238 instanceof Data_Maybe.Just) {
                    return f(_238.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (f) {
        return function (z) {
            return function (_237) {
                if (_237 instanceof Data_Maybe.Nothing) {
                    return z;
                };
                if (_237 instanceof Data_Maybe.Just) {
                    return f(z)(_237.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (f) {
        return function (z) {
            return function (_236) {
                if (_236 instanceof Data_Maybe.Nothing) {
                    return z;
                };
                if (_236 instanceof Data_Maybe.Just) {
                    return f(_236.value0)(z);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableEither = new Foldable(function (__dict_Monoid_128) {
        return function (f) {
            return function (_235) {
                if (_235 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_128);
                };
                if (_235 instanceof Data_Either.Right) {
                    return f(_235.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (f) {
        return function (z) {
            return function (_234) {
                if (_234 instanceof Data_Either.Left) {
                    return z;
                };
                if (_234 instanceof Data_Either.Right) {
                    return f(z)(_234.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (f) {
        return function (z) {
            return function (_233) {
                if (_233 instanceof Data_Either.Left) {
                    return z;
                };
                if (_233 instanceof Data_Either.Right) {
                    return f(_233.value0)(z);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableDual = new Foldable(function (__dict_Monoid_129) {
        return function (f) {
            return function (_247) {
                return f(_247);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_246) {
                return f(z)(_246);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_245) {
                return f(_245)(z);
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_130) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_130["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_130))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldableAdditive = new Foldable(function (__dict_Monoid_131) {
        return function (f) {
            return function (_244) {
                return f(_244);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_243) {
                return f(z)(_243);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_242) {
                return f(_242)(z);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var foldableFirst = new Foldable(function (__dict_Monoid_132) {
        return function (f) {
            return function (_250) {
                return foldMap(foldableMaybe)(__dict_Monoid_132)(f)(_250);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_249) {
                return foldl(foldableMaybe)(f)(z)(_249);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_248) {
                return foldr(foldableMaybe)(f)(z)(_248);
            };
        };
    });
    var foldableLast = new Foldable(function (__dict_Monoid_133) {
        return function (f) {
            return function (_253) {
                return foldMap(foldableMaybe)(__dict_Monoid_133)(f)(_253);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_252) {
                return foldl(foldableMaybe)(f)(z)(_252);
            };
        };
    }, function (f) {
        return function (z) {
            return function (_251) {
                return foldr(foldableMaybe)(f)(z)(_251);
            };
        };
    });
    var lookup = function (__dict_Eq_134) {
        return function (__dict_Foldable_135) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_135)(Data_Monoid_First.monoidFirst)(function (_232) {
                        var _845 = Prelude["=="](__dict_Eq_134)(a)(_232.value0);
                        if (_845) {
                            return new Data_Maybe.Just(_232.value1);
                        };
                        if (!_845) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match");
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_136) {
        return function (__dict_Monoid_137) {
            return foldMap(__dict_Foldable_136)(__dict_Monoid_137)(Prelude.id(Prelude.categoryArr));
        };
    };
    var find = function (__dict_Foldable_138) {
        return function (p) {
            return function (f) {
                var _849 = foldMap(__dict_Foldable_138)(Data_Monoid.monoidArray)(function (x) {
                    var _848 = p(x);
                    if (_848) {
                        return [ x ];
                    };
                    if (!_848) {
                        return [  ];
                    };
                    throw new Error("Failed pattern match");
                })(f);
                if (_849.length >= 1) {
                    var _851 = _849.slice(1);
                    return new Data_Maybe.Just(_849[0]);
                };
                if (_849.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_139) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_139)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_140) {
        return function (__dict_Foldable_141) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_141))(Prelude["=="](__dict_Eq_140));
        };
    };
    var notElem = function (__dict_Eq_142) {
        return function (__dict_Foldable_143) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_142)(__dict_Foldable_143)(x));
            };
        };
    };
    var and = function (__dict_Foldable_144) {
        return foldl(__dict_Foldable_144)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_145) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_145)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        lookup: lookup, 
        find: find, 
        notElem: notElem, 
        elem: elem, 
        product: product, 
        sum: sum, 
        all: all, 
        any: any, 
        or: or, 
        and: and, 
        intercalate: intercalate, 
        mconcat: mconcat, 
        sequence_: sequence_, 
        for_: for_, 
        traverse_: traverse_, 
        fold: fold, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableTuple: foldableTuple, 
        foldableAdditive: foldableAdditive, 
        foldableDual: foldableDual, 
        foldableFirst: foldableFirst, 
        foldableLast: foldableLast, 
        foldableMultiplicative: foldableMultiplicative
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;
    
    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;
    
    function fromCharArray(a) {
      return a.join('');
    }
    ;
    
    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;
    
    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;
    
    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;
    
    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;
    
    function length(s) {
      return s.length;
    }
    ;
    
    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;
    
    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function count(p){
      return function(s){
        var i;
        for(i = 0; i < s.length && p(s.charAt(i)); i++){};
        return i;
      };
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function toCharArray(s) {
      return s.split('');
    }
    ;
    
    function toLower(s) {
      return s.toLowerCase();
    }
    ;
    
    function toUpper(s) {
      return s.toUpperCase();
    }
    ;
    
    function trim(s) {
      return s.trim();
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    var takeWhile = function (p) {
        return function (s) {
            return take(count(p)(s))(s);
        };
    };
    var $$null = function (s) {
        return length(s) === 0;
    };
    var uncons = function (s) {
        if ($$null(s)) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just({
            head: Data_String_Unsafe.charAt(0)(s), 
            tail: drop(1)(s)
        });
    };
    var fromChar = Data_Char.charString;
    var singleton = fromChar;
    var dropWhile = function (p) {
        return function (s) {
            return drop(count(p)(s))(s);
        };
    };
    var charCodeAt = function (n) {
        return function (s) {
            return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    var charAt = function (n) {
        return function (s) {
            return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        joinWith: joinWith, 
        trim: trim, 
        toUpper: toUpper, 
        toLower: toLower, 
        toCharArray: toCharArray, 
        split: split, 
        dropWhile: dropWhile, 
        drop: drop, 
        takeWhile: takeWhile, 
        take: take, 
        count: count, 
        replace: replace, 
        localeCompare: localeCompare, 
        singleton: singleton, 
        length: length, 
        uncons: uncons, 
        "null": $$null, 
        "lastIndexOf'": lastIndexOf$prime, 
        lastIndexOf: lastIndexOf, 
        "indexOf'": indexOf$prime, 
        indexOf: indexOf, 
        fromChar: fromChar, 
        fromCharArray: fromCharArray, 
        charCodeAt: charCodeAt, 
        charAt: charAt
    };
})();
var PS = PS || {};
PS.Data_String_Regex = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_String = PS.Data_String;
    var Data_Function = PS.Data_Function;
    var Data_Maybe = PS.Data_Maybe;
    
  function showRegex$prime(r) {
    return '' + r;
  }
  ;
    
  function regex$prime(s1) {
    return function(s2) {
      return new RegExp(s1, s2);
    };
  }
  ;
    
  function source(r) {
    return r.source;
  }
  ;
    
  function flags(r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  }
  ;
    
  function test(r) {
    return function(s) {
      return r.test(s);
    };
  }
  ;
    
  function _match(r, s, Just, Nothing) {
    var m = s.match(r);
    return m == null ? Nothing : Just(m);
  }
  ;
    
  function replace(r) {
    return function(s1) {
      return function(s2) {
        return s2.replace(r, s1);
      };
    };
  }
  ;
    
  function replace$prime(r) {
    return function(f) {
      return function(s2) {
        return s2.replace(r, function(match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  }
  ;
    
  function search(r) {
    return function(s) {
      return s.search(r);
    };
  }
  ;
    
  function split(r) {
    return function(s) {
      return s.split(r);
    };
  }
  ;
    var showRegex = new Prelude.Show(showRegex$prime);
    var renderFlags = function (flags) {
        return (function () {
            if (flags.global) {
                return "g";
            };
            if (!flags.global) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + ((function () {
            if (flags.ignoreCase) {
                return "i";
            };
            if (!flags.ignoreCase) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + ((function () {
            if (flags.multiline) {
                return "m";
            };
            if (!flags.multiline) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + ((function () {
            if (flags.sticky) {
                return "y";
            };
            if (!flags.sticky) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + (function () {
            if (flags.unicode) {
                return "u";
            };
            if (!flags.unicode) {
                return "";
            };
            throw new Error("Failed pattern match");
        })())));
    };
    var regex = function (source) {
        return function (flags) {
            return regex$prime(source)(renderFlags(flags));
        };
    };
    var parseFlags = function (s) {
        return {
            global: Data_String.indexOf("g")(s) >= 0, 
            ignoreCase: Data_String.indexOf("i")(s) >= 0, 
            multiline: Data_String.indexOf("m")(s) >= 0, 
            sticky: Data_String.indexOf("y")(s) >= 0, 
            unicode: Data_String.indexOf("u")(s) >= 0
        };
    };
    var noFlags = {
        global: false, 
        ignoreCase: false, 
        multiline: false, 
        sticky: false, 
        unicode: false
    };
    var match = function (r) {
        return function (s) {
            return _match(r, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        noFlags: noFlags, 
        split: split, 
        search: search, 
        "replace'": replace$prime, 
        replace: replace, 
        match: match, 
        test: test, 
        parseFlags: parseFlags, 
        renderFlags: renderFlags, 
        flags: flags, 
        source: source, 
        regex: regex, 
        showRegex: showRegex
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var StateR = function (x) {
        return x;
    };
    var StateL = function (x) {
        return x;
    };
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = new Traversable(function () {
        return Data_Foldable.foldableTuple;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function (__dict_Applicative_147) {
        return function (_267) {
            return Prelude["<$>"]((__dict_Applicative_147["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_267.value0))(_267.value1);
        };
    }, function (__dict_Applicative_146) {
        return function (f) {
            return function (_266) {
                return Prelude["<$>"]((__dict_Applicative_146["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_266.value0))(f(_266.value1));
            };
        };
    });
    var traversableMultiplicative = new Traversable(function () {
        return Data_Foldable.foldableMultiplicative;
    }, function () {
        return Data_Monoid_Multiplicative.functorMultiplicative;
    }, function (__dict_Applicative_149) {
        return function (_277) {
            return Prelude["<$>"]((__dict_Applicative_149["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(_277);
        };
    }, function (__dict_Applicative_148) {
        return function (f) {
            return function (_276) {
                return Prelude["<$>"]((__dict_Applicative_148["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(_276));
            };
        };
    });
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_151) {
        return function (_265) {
            if (_265 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_151)(Data_Maybe.Nothing.value);
            };
            if (_265 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_151["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_265.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_150) {
        return function (f) {
            return function (_264) {
                if (_264 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_150)(Data_Maybe.Nothing.value);
                };
                if (_264 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_150["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(f(_264.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableEither = new Traversable(function () {
        return Data_Foldable.foldableEither;
    }, function () {
        return Data_Either.functorEither;
    }, function (__dict_Applicative_153) {
        return function (_263) {
            if (_263 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_153)(new Data_Either.Left(_263.value0));
            };
            if (_263 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_153["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_263.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_152) {
        return function (f) {
            return function (_262) {
                if (_262 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_152)(new Data_Either.Left(_262.value0));
                };
                if (_262 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_152["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(f(_262.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableDual = new Traversable(function () {
        return Data_Foldable.foldableDual;
    }, function () {
        return Data_Monoid_Dual.functorDual;
    }, function (__dict_Applicative_155) {
        return function (_271) {
            return Prelude["<$>"]((__dict_Applicative_155["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(_271);
        };
    }, function (__dict_Applicative_154) {
        return function (f) {
            return function (_270) {
                return Prelude["<$>"]((__dict_Applicative_154["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(_270));
            };
        };
    });
    var traversableAdditive = new Traversable(function () {
        return Data_Foldable.foldableAdditive;
    }, function () {
        return Data_Monoid_Additive.functorAdditive;
    }, function (__dict_Applicative_157) {
        return function (_269) {
            return Prelude["<$>"]((__dict_Applicative_157["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(_269);
        };
    }, function (__dict_Applicative_156) {
        return function (f) {
            return function (_268) {
                return Prelude["<$>"]((__dict_Applicative_156["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(_268));
            };
        };
    });
    var stateR = function (_259) {
        return _259;
    };
    var stateL = function (_258) {
        return _258;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_159) {
        return function (_261) {
            if (_261.length === 0) {
                return Prelude.pure(__dict_Applicative_159)([  ]);
            };
            if (_261.length >= 1) {
                var _890 = _261.slice(1);
                return Prelude["<*>"](__dict_Applicative_159["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_159["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_261[0]))(sequence(traversableArray)(__dict_Applicative_159)(_890));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_158) {
        return function (f) {
            return function (_260) {
                if (_260.length === 0) {
                    return Prelude.pure(__dict_Applicative_158)([  ]);
                };
                if (_260.length >= 1) {
                    var _894 = _260.slice(1);
                    return Prelude["<*>"](__dict_Applicative_158["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_158["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(f(_260[0])))(traverse(traversableArray)(__dict_Applicative_158)(f)(_894));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableFirst = new Traversable(function () {
        return Data_Foldable.foldableFirst;
    }, function () {
        return Data_Monoid_First.functorFirst;
    }, function (__dict_Applicative_161) {
        return function (_273) {
            return Prelude["<$>"]((__dict_Applicative_161["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(sequence(traversableMaybe)(__dict_Applicative_161)(_273));
        };
    }, function (__dict_Applicative_160) {
        return function (f) {
            return function (_272) {
                return Prelude["<$>"]((__dict_Applicative_160["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(traverse(traversableMaybe)(__dict_Applicative_160)(f)(_272));
            };
        };
    });
    var traversableLast = new Traversable(function () {
        return Data_Foldable.foldableLast;
    }, function () {
        return Data_Monoid_Last.functorLast;
    }, function (__dict_Applicative_163) {
        return function (_275) {
            return Prelude["<$>"]((__dict_Applicative_163["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(sequence(traversableMaybe)(__dict_Applicative_163)(_275));
        };
    }, function (__dict_Applicative_162) {
        return function (f) {
            return function (_274) {
                return Prelude["<$>"]((__dict_Applicative_162["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(traverse(traversableMaybe)(__dict_Applicative_162)(f)(_274));
            };
        };
    });
    var zipWithA = function (__dict_Applicative_164) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_164)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var functorStateR = new Prelude.Functor(function (f) {
        return function (k) {
            return StateR(function (s) {
                var _901 = stateR(k)(s);
                return new Data_Tuple.Tuple(_901.value0, f(_901.value1));
            });
        };
    });
    var functorStateL = new Prelude.Functor(function (f) {
        return function (k) {
            return StateL(function (s) {
                var _904 = stateL(k)(s);
                return new Data_Tuple.Tuple(_904.value0, f(_904.value1));
            });
        };
    });
    var $$for = function (__dict_Applicative_169) {
        return function (__dict_Traversable_170) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_170)(__dict_Applicative_169)(f)(x);
                };
            };
        };
    };
    var applyStateR = new Prelude.Apply(function (f) {
        return function (x) {
            return StateR(function (s) {
                var _907 = stateR(x)(s);
                var _908 = stateR(f)(_907.value0);
                return new Data_Tuple.Tuple(_908.value0, _908.value1(_907.value1));
            });
        };
    }, function () {
        return functorStateR;
    });
    var applyStateL = new Prelude.Apply(function (f) {
        return function (x) {
            return StateL(function (s) {
                var _913 = stateL(f)(s);
                var _914 = stateL(x)(_913.value0);
                return new Data_Tuple.Tuple(_914.value0, _913.value1(_914.value1));
            });
        };
    }, function () {
        return functorStateL;
    });
    var applicativeStateR = new Prelude.Applicative(function () {
        return applyStateR;
    }, function (a) {
        return StateR(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumR = function (__dict_Traversable_165) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateR(traverse(__dict_Traversable_165)(applicativeStateR)(function (a) {
                        return StateR(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanr = function (__dict_Traversable_166) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumR(__dict_Traversable_166)(function (b) {
                        return function (a) {
                            var b$prime = f(a)(b);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    var applicativeStateL = new Prelude.Applicative(function () {
        return applyStateL;
    }, function (a) {
        return StateL(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumL = function (__dict_Traversable_167) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateL(traverse(__dict_Traversable_167)(applicativeStateL)(function (a) {
                        return StateL(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanl = function (__dict_Traversable_168) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumL(__dict_Traversable_168)(function (b) {
                        return function (a) {
                            var b$prime = f(b)(a);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        mapAccumR: mapAccumR, 
        mapAccumL: mapAccumL, 
        scanr: scanr, 
        scanl: scanl, 
        zipWithA: zipWithA, 
        "for": $$for, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableMaybe: traversableMaybe, 
        traversableTuple: traversableTuple, 
        traversableAdditive: traversableAdditive, 
        traversableDual: traversableDual, 
        traversableFirst: traversableFirst, 
        traversableLast: traversableLast, 
        traversableMultiplicative: traversableMultiplicative
    };
})();
var PS = PS || {};
PS.Starter_Kit_Example = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var inOrder = function (__dict_Ord_171) {
        return function (a1) {
            return function (a2) {
                if (Prelude["<"](__dict_Ord_171)(a1)(a2)) {
                    return new Data_Tuple.Tuple(a1, a2);
                };
                return new Data_Tuple.Tuple(a2, a1);
            };
        };
    };
    var diffs = function (_278) {
        if (_278.length === 0) {
            return Prelude["return"](Data_Maybe.monadMaybe)([  ]);
        };
        if (_278.length === 1) {
            return Prelude["return"](Data_Maybe.monadMaybe)([  ]);
        };
        if (_278.length >= 1) {
            var _925 = _278.slice(1);
            if (_925.length >= 1) {
                var _927 = _925.slice(1);
                if (_278[0] <= _925[0]) {
                    return Prelude[">>="](Data_Maybe.bindMaybe)(diffs(_925))(function (_9) {
                        return Prelude["return"](Data_Maybe.monadMaybe)(Prelude[":"](_925[0] - _278[0])(_9));
                    });
                };
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return {
        diffs: diffs, 
        inOrder: inOrder
    };
})();
var PS = PS || {};
PS.Test_QuickCheck_Gen = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    function float32ToInt32(n) {  var arr = new ArrayBuffer(4);  var fv = new Float32Array(arr);  var iv = new Int32Array(arr);  fv[0] = n;  return iv[0];};
    var Gen = (function () {
        function Gen(value0) {
            this.value0 = value0;
        };
        Gen.create = function (value0) {
            return new Gen(value0);
        };
        return Gen;
    })();
    var runGen = function (_279) {
        return _279.value0;
    };
    var stateful = function (f) {
        return new Gen(function (s) {
            return runGen(f(s))(s);
        });
    };
    var sized = function (f) {
        return stateful(function (s) {
            return f(s.size);
        });
    };
    var variant = function (n) {
        return function (g) {
            return Gen.create(function (s) {
                return runGen(g)((function () {
                    var _930 = {};
                    for (var _931 in s) {
                        if (s.hasOwnProperty(_931)) {
                            _930[_931] = s[_931];
                        };
                    };
                    _930.newSeed = n;
                    return _930;
                })());
            });
        };
    };
    var resize = function (sz) {
        return function (g) {
            return Gen.create(function (s) {
                return runGen(g)((function () {
                    var _932 = {};
                    for (var _933 in s) {
                        if (s.hasOwnProperty(_933)) {
                            _932[_933] = s[_933];
                        };
                    };
                    _932.size = sz;
                    return _932;
                })());
            });
        };
    };
    var repeatable = function (f) {
        return Gen.create(function (s) {
            return {
                value: function (a) {
                    return (runGen(f(a))(s)).value;
                }, 
                state: s
            };
        });
    };
    var lcgN = 1 << 30;
    var lcgM = 1103515245;
    var lcgC = 12345;
    var lcgNext = function (n) {
        return (lcgM * n + lcgC) % lcgN;
    };
    var lcgStep = (function () {
        var f = function (s) {
            return {
                value: s.newSeed, 
                state: (function () {
                    var _934 = {};
                    for (var _935 in s) {
                        if (s.hasOwnProperty(_935)) {
                            _934[_935] = s[_935];
                        };
                    };
                    _934.newSeed = lcgNext(s.newSeed);
                    return _934;
                })()
            };
        };
        return new Gen(f);
    })();
    var perturbGen = function (n) {
        return function (_280) {
            return Gen.create(function (s) {
                return _280.value0((function () {
                    var _938 = {};
                    for (var _939 in s) {
                        if (s.hasOwnProperty(_939)) {
                            _938[_939] = s[_939];
                        };
                    };
                    _938.newSeed = lcgNext(float32ToInt32(n)) + s.newSeed;
                    return _938;
                })());
            });
        };
    };
    var functorGen = new Prelude.Functor(function (f) {
        return function (_282) {
            return Gen.create(function (s) {
                var _943 = _282.value0(s);
                return {
                    value: f(_943.value), 
                    state: _943.state
                };
            });
        };
    });
    var uniform = Prelude["<$>"](functorGen)(function (n) {
        return n / (1 << 30);
    })(lcgStep);
    var evalGen = function (gen) {
        return function (st) {
            return (runGen(gen)(st)).value;
        };
    };
    var choose = function (a) {
        return function (b) {
            var min = $$Math.min(a)(b);
            var max = $$Math.max(a)(b);
            return Prelude["<$>"](functorGen)(Prelude[">>>"](Prelude.semigroupoidArr)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform);
        };
    };
    var chooseInt = function (a) {
        return function (b) {
            return Prelude["<$>"](functorGen)($$Math.floor)(choose($$Math.ceil(a))($$Math.floor(b) + 0.9999999989999999));
        };
    };
    var applyGen = new Prelude.Apply(function (_283) {
        return function (_284) {
            return Gen.create(function (s) {
                var _949 = _283.value0(s);
                var _950 = _284.value0(_949.state);
                return {
                    value: _949.value(_950.value), 
                    state: _950.state
                };
            });
        };
    }, function () {
        return functorGen;
    });
    var bindGen = new Prelude.Bind(function (_285) {
        return function (g) {
            return Gen.create(function (s) {
                var _959 = _285.value0(s);
                return runGen(g(_959.value))(_959.state);
            });
        };
    }, function () {
        return applyGen;
    });
    var frequency = function (x) {
        return function (xs) {
            var xxs = Prelude[":"](x)(xs);
            var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude["<$>"](Data_Array.functorArray)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Monoid_Additive.Additive)(Data_Tuple.fst))(xxs)));
            var pick = function (__copy_n) {
                return function (__copy_d) {
                    return function (__copy__281) {
                        var n = __copy_n;
                        var d = __copy_d;
                        var _281 = __copy__281;
                        tco: while (true) {
                            if (_281.length === 0) {
                                return d;
                            };
                            if (_281.length >= 1) {
                                var _970 = _281.slice(1);
                                var _966 = n <= (_281[0]).value0;
                                if (_966) {
                                    return (_281[0]).value1;
                                };
                                if (!_966) {
                                    var __tco_n = n - (_281[0]).value0;
                                    var __tco_d = d;
                                    n = __tco_n;
                                    d = __tco_d;
                                    _281 = _970;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
            return Prelude[">>="](bindGen)(chooseInt(1)(total))(function (_11) {
                return pick(_11)(Data_Tuple.snd(x))(xxs);
            });
        };
    };
    var oneOf = function (x) {
        return function (xs) {
            return Prelude[">>="](bindGen)(chooseInt(0)(Data_Array.length(xs)))(function (_10) {
                var _973 = _10 === 0;
                if (_973) {
                    return x;
                };
                if (!_973) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_10 - 1));
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var applicativeGen = new Prelude.Applicative(function () {
        return applyGen;
    }, function (a) {
        return new Gen(function (s) {
            return {
                value: a, 
                state: s
            };
        });
    });
    var elements = function (x) {
        return function (xs) {
            return Prelude[">>="](bindGen)(chooseInt(0)(Data_Array.length(xs)))(function (_16) {
                return Prelude.pure(applicativeGen)((function () {
                    var _975 = _16 === 0;
                    if (_975) {
                        return x;
                    };
                    if (!_975) {
                        return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_16 - 1));
                    };
                    throw new Error("Failed pattern match");
                })());
            });
        };
    };
    var monadGen = new Prelude.Monad(function () {
        return applicativeGen;
    }, function () {
        return bindGen;
    });
    var vectorOf = function (k) {
        return function (g) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeGen)(Prelude["<$>"](Data_Array.functorArray)(Prelude["const"](g))(Data_Array.range(1)(k)));
        };
    };
    var arrayOf = function (g) {
        return sized(function (n) {
            return Prelude[">>="](bindGen)(chooseInt(0)(n))(function (_12) {
                return vectorOf(_12)(g);
            });
        });
    };
    var arrayOf1 = function (g) {
        return sized(function (n) {
            return Prelude[">>="](bindGen)(chooseInt(0)(n))(function (_15) {
                return Prelude[">>="](bindGen)(g)(function (_14) {
                    return Prelude[">>="](bindGen)(vectorOf(_15 - 1)(g))(function (_13) {
                        return Prelude["return"](monadGen)(new Data_Tuple.Tuple(_14, _13));
                    });
                });
            });
        });
    };
    var sample = function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: 0, 
                size: sz
            });
        };
    };
    var showSample$prime = function (__dict_Show_172) {
        return function (n) {
            return function (g) {
                return Debug_Trace.print(Prelude.showArray(__dict_Show_172))(sample(n)(g));
            };
        };
    };
    var showSample = function (__dict_Show_173) {
        return showSample$prime(__dict_Show_173)(10);
    };
    return {
        "showSample'": showSample$prime, 
        showSample: showSample, 
        uniform: uniform, 
        perturbGen: perturbGen, 
        evalGen: evalGen, 
        runGen: runGen, 
        elements: elements, 
        vectorOf: vectorOf, 
        arrayOf1: arrayOf1, 
        arrayOf: arrayOf, 
        frequency: frequency, 
        oneOf: oneOf, 
        chooseInt: chooseInt, 
        choose: choose, 
        resize: resize, 
        sized: sized, 
        variant: variant, 
        stateful: stateful, 
        repeatable: repeatable, 
        functorGen: functorGen, 
        applyGen: applyGen, 
        applicativeGen: applicativeGen, 
        bindGen: bindGen, 
        monadGen: monadGen
    };
})();
var PS = PS || {};
PS.Test_QuickCheck = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Char = PS.Data_Char;
    var Test_QuickCheck_Gen = PS.Test_QuickCheck_Gen;
    var Data_String = PS.Data_String;
    var $$Math = PS.$$Math;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Array = PS.Data_Array;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Bind = PS.Control_Bind;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Success = (function () {
        function Success() {

        };
        Success.value = new Success();
        return Success;
    })();
    var Failed = (function () {
        function Failed(value0) {
            this.value0 = value0;
        };
        Failed.create = function (value0) {
            return new Failed(value0);
        };
        return Failed;
    })();
    var AlphaNumString = function (x) {
        return x;
    };
    var Arbitrary = function (arbitrary) {
        this.arbitrary = arbitrary;
    };
    var CoArbitrary = function (coarbitrary) {
        this.coarbitrary = coarbitrary;
    };
    var Testable = function (test) {
        this.test = test;
    };
    var $less$qmark$greater = function (_286) {
        return function (msg) {
            if (_286) {
                return Success.value;
            };
            if (!_286) {
                return new Failed(msg);
            };
            throw new Error("Failed pattern match");
        };
    };
    var $eq$eq$eq = function (__dict_Eq_174) {
        return function (__dict_Show_175) {
            return function (a) {
                return function (b) {
                    var msg = Prelude.show(__dict_Show_175)(a) + (" /= " + Prelude.show(__dict_Show_175)(b));
                    return $less$qmark$greater(Prelude["=="](__dict_Eq_174)(a)(b))(msg);
                };
            };
        };
    };
    var $div$eq$eq = function (__dict_Eq_176) {
        return function (__dict_Show_177) {
            return function (a) {
                return function (b) {
                    var msg = Prelude.show(__dict_Show_177)(a) + (" == " + Prelude.show(__dict_Show_177)(b));
                    return $less$qmark$greater(Prelude["/="](__dict_Eq_176)(a)(b))(msg);
                };
            };
        };
    };
    var testableResult = new Testable(Prelude["return"](Test_QuickCheck_Gen.monadGen));
    var testableBoolean = new Testable(function (_296) {
        if (_296) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Success.value);
        };
        if (!_296) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(new Failed("Test returned false"));
        };
        throw new Error("Failed pattern match");
    });
    var test = function (dict) {
        return dict.test;
    };
    var showResult = new Prelude.Show(function (_287) {
        if (_287 instanceof Success) {
            return "Success";
        };
        if (_287 instanceof Failed) {
            return "Failed: " + _287.value0;
        };
        throw new Error("Failed pattern match");
    });
    var quickCheckPure = function (__dict_Testable_178) {
        return function (s) {
            var quickCheckPure$prime = function (st) {
                return function (n) {
                    return function (prop) {
                        var go = function (n_1) {
                            if (n_1 <= 0) {
                                return Prelude["return"](Test_QuickCheck_Gen.monadGen)([  ]);
                            };
                            return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(test(__dict_Testable_178)(prop))(function (_28) {
                                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(go(n_1 - 1))(function (_27) {
                                    return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude[":"](_28)(_27));
                                });
                            });
                        };
                        return Test_QuickCheck_Gen.evalGen(go(n))(st);
                    };
                };
            };
            return quickCheckPure$prime({
                newSeed: s, 
                size: 10
            });
        };
    };
    var quickCheck$prime = function (__dict_Testable_179) {
        return function (n) {
            return function (prop) {
                var throwOnFirstFailure = function (__copy_n_1) {
                    return function (__copy__297) {
                        var n_1 = __copy_n_1;
                        var _297 = __copy__297;
                        tco: while (true) {
                            if (_297.length === 0) {
                                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                            };
                            if (_297.length >= 1) {
                                var _992 = _297.slice(1);
                                if (_297[0] instanceof Failed) {
                                    return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showNumber)(n_1) + (" failed: \n" + (_297[0]).value0))));
                                };
                            };
                            if (_297.length >= 1) {
                                var _994 = _297.slice(1);
                                var __tco_n_1 = n_1 + 1;
                                n_1 = __tco_n_1;
                                _297 = _994;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                var countSuccesses = function (_298) {
                    if (_298.length === 0) {
                        return 0;
                    };
                    if (_298.length >= 1) {
                        var _997 = _298.slice(1);
                        if (_298[0] instanceof Success) {
                            return 1 + countSuccesses(_997);
                        };
                    };
                    if (_298.length >= 1) {
                        var _999 = _298.slice(1);
                        return countSuccesses(_999);
                    };
                    throw new Error("Failed pattern match");
                };
                return function __do() {
                    var _29 = Control_Monad_Eff_Random.random();
                    return (function () {
                        var results = quickCheckPure(__dict_Testable_179)(_29)(n)(prop);
                        var successes = countSuccesses(results);
                        return function __do() {
                            Debug_Trace.trace(Prelude.show(Prelude.showNumber)(successes) + ("/" + (Prelude.show(Prelude.showNumber)(n) + " test(s) passed.")))();
                            return throwOnFirstFailure(1)(results)();
                        };
                    })()();
                };
            };
        };
    };
    var quickCheck = function (__dict_Testable_180) {
        return function (prop) {
            return quickCheck$prime(__dict_Testable_180)(100)(prop);
        };
    };
    var coarbitrary = function (dict) {
        return dict.coarbitrary;
    };
    var coarbUnit = new CoArbitrary(function (_289) {
        return Test_QuickCheck_Gen.perturbGen(1);
    });
    var coarbTuple = function (__dict_CoArbitrary_181) {
        return function (__dict_CoArbitrary_182) {
            return new CoArbitrary(function (_292) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(coarbitrary(__dict_CoArbitrary_181)(_292.value0))(coarbitrary(__dict_CoArbitrary_182)(_292.value1));
            });
        };
    };
    var coarbOrdering = new CoArbitrary(function (_290) {
        if (_290 instanceof Prelude.LT) {
            return Test_QuickCheck_Gen.perturbGen(1);
        };
        if (_290 instanceof Prelude.EQ) {
            return Test_QuickCheck_Gen.perturbGen(2);
        };
        if (_290 instanceof Prelude.GT) {
            return Test_QuickCheck_Gen.perturbGen(3);
        };
        throw new Error("Failed pattern match");
    });
    var coarbNumber = new CoArbitrary(Test_QuickCheck_Gen.perturbGen);
    var coarbMaybe = function (__dict_CoArbitrary_183) {
        return new CoArbitrary(function (_294) {
            if (_294 instanceof Data_Maybe.Nothing) {
                return Test_QuickCheck_Gen.perturbGen(1);
            };
            if (_294 instanceof Data_Maybe.Just) {
                return coarbitrary(__dict_CoArbitrary_183)(_294.value0);
            };
            throw new Error("Failed pattern match");
        });
    };
    var coarbEither = function (__dict_CoArbitrary_184) {
        return function (__dict_CoArbitrary_185) {
            return new CoArbitrary(function (_293) {
                if (_293 instanceof Data_Either.Left) {
                    return coarbitrary(__dict_CoArbitrary_184)(_293.value0);
                };
                if (_293 instanceof Data_Either.Right) {
                    return coarbitrary(__dict_CoArbitrary_185)(_293.value0);
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var coarbChar = new CoArbitrary(function (c) {
        return coarbitrary(coarbNumber)(Data_Char.toCharCode(c));
    });
    var coarbBoolean = new CoArbitrary(function (_288) {
        if (_288) {
            return Test_QuickCheck_Gen.perturbGen(1);
        };
        if (!_288) {
            return Test_QuickCheck_Gen.perturbGen(2);
        };
        throw new Error("Failed pattern match");
    });
    var coarbArray = function (__dict_CoArbitrary_186) {
        return new CoArbitrary(function (_295) {
            if (_295.length === 0) {
                return Prelude.id(Prelude.categoryArr);
            };
            if (_295.length >= 1) {
                var _1014 = _295.slice(1);
                return Prelude["<<<"](Prelude.semigroupoidArr)(coarbitrary(coarbArray(__dict_CoArbitrary_186))(_1014))(coarbitrary(__dict_CoArbitrary_186)(_295[0]));
            };
            throw new Error("Failed pattern match");
        });
    };
    var coarbString = new CoArbitrary(function (s) {
        return coarbitrary(coarbArray(coarbMaybe(coarbNumber)))(Prelude["<$>"](Data_Array.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
    });
    var coarbAlphaNumString = new CoArbitrary(function (_291) {
        return coarbitrary(coarbString)(_291);
    });
    var arbitrary = function (dict) {
        return dict.arbitrary;
    };
    var testableFunction = function (__dict_Arbitrary_189) {
        return function (__dict_Testable_190) {
            return new Testable(function (f) {
                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(__dict_Arbitrary_189))(function (_26) {
                    return test(__dict_Testable_190)(f(_26));
                });
            });
        };
    };
    var arbUnit = new Arbitrary(Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude.unit));
    var arbTuple = function (__dict_Arbitrary_191) {
        return function (__dict_Arbitrary_192) {
            return new Arbitrary(Prelude["<*>"](Test_QuickCheck_Gen.applyGen)(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Tuple.Tuple.create)(arbitrary(__dict_Arbitrary_191)))(arbitrary(__dict_Arbitrary_192)));
        };
    };
    var arbOrdering = new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.chooseInt(1)(3))(function (_18) {
        return Prelude["return"](Test_QuickCheck_Gen.monadGen)((function () {
            if (_18 === 1) {
                return Prelude.LT.value;
            };
            if (_18 === 2) {
                return Prelude.EQ.value;
            };
            if (_18 === 3) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        })());
    }));
    var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
    var arbFunction = function (__dict_CoArbitrary_194) {
        return function (__dict_Arbitrary_195) {
            return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
                return coarbitrary(__dict_CoArbitrary_194)(a)(arbitrary(__dict_Arbitrary_195));
            }));
        };
    };
    var arbChar = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Char.fromCharCode)(Prelude["*"](Prelude.semiringNumber)(65535)))(Test_QuickCheck_Gen.uniform));
    var arbBoolean = new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.uniform)(function (_17) {
        return Prelude["return"](Test_QuickCheck_Gen.monadGen)(_17 * 2 < 1);
    }));
    var arbEither = function (__dict_Arbitrary_196) {
        return function (__dict_Arbitrary_197) {
            return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_20) {
                if (_20) {
                    return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Left.create)(arbitrary(__dict_Arbitrary_196));
                };
                if (!_20) {
                    return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Right.create)(arbitrary(__dict_Arbitrary_197));
                };
                throw new Error("Failed pattern match");
            }));
        };
    };
    var arbMaybe = function (__dict_Arbitrary_193) {
        return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_21) {
            if (_21) {
                return Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Maybe.Nothing.value);
            };
            if (!_21) {
                return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Maybe.Just.create)(arbitrary(__dict_Arbitrary_193));
            };
            throw new Error("Failed pattern match");
        }));
    };
    var arbArray = function (__dict_Arbitrary_198) {
        return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_25) {
            if (_25) {
                return Prelude["return"](Test_QuickCheck_Gen.monadGen)([  ]);
            };
            if (!_25) {
                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(__dict_Arbitrary_198))(function (_24) {
                    return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_198)))(function (_23) {
                        return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude[":"](_24)(_23));
                    });
                });
            };
            throw new Error("Failed pattern match");
        }));
    };
    var arbString = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
    var coarbFunction = function (__dict_Arbitrary_187) {
        return function (__dict_CoArbitrary_188) {
            return new CoArbitrary(function (f) {
                return function (gen) {
                    return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_187)))(function (_22) {
                        return coarbitrary(coarbArray(__dict_CoArbitrary_188))(Data_Array.map(f)(_22))(gen);
                    });
                };
            });
        };
    };
    var arbAlphaNumString = new Arbitrary((function () {
        var lookup = function (x) {
            var index = $$Math.round(x * (Data_String.length("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") - 1));
            return Data_String_Unsafe.charAt(index)("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
        };
        return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(arbNumber)))(function (_19) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude["<<<"](Prelude.semigroupoidArr)(AlphaNumString)(Data_String.fromCharArray)(Prelude["<$>"](Data_Array.functorArray)(lookup)(_19)));
        });
    })());
    return {
        AlphaNumString: AlphaNumString, 
        Success: Success, 
        Failed: Failed, 
        Testable: Testable, 
        CoArbitrary: CoArbitrary, 
        Arbitrary: Arbitrary, 
        "/==": $div$eq$eq, 
        "===": $eq$eq$eq, 
        quickCheck: quickCheck, 
        "quickCheck'": quickCheck$prime, 
        quickCheckPure: quickCheckPure, 
        test: test, 
        "<?>": $less$qmark$greater, 
        coarbitrary: coarbitrary, 
        arbitrary: arbitrary, 
        showResult: showResult, 
        arbChar: arbChar, 
        coarbChar: coarbChar, 
        arbNumber: arbNumber, 
        coarbNumber: coarbNumber, 
        arbBoolean: arbBoolean, 
        coarbBoolean: coarbBoolean, 
        arbString: arbString, 
        coarbString: coarbString, 
        arbUnit: arbUnit, 
        coarbUnit: coarbUnit, 
        arbOrdering: arbOrdering, 
        coarbOrdering: coarbOrdering, 
        arbAlphaNumString: arbAlphaNumString, 
        coarbAlphaNumString: coarbAlphaNumString, 
        arbTuple: arbTuple, 
        coarbTuple: coarbTuple, 
        arbEither: arbEither, 
        coarbEither: coarbEither, 
        arbMaybe: arbMaybe, 
        coarbMaybe: coarbMaybe, 
        arbFunction: arbFunction, 
        coarbFunction: coarbFunction, 
        arbArray: arbArray, 
        coarbArray: coarbArray, 
        testableResult: testableResult, 
        testableBoolean: testableBoolean, 
        testableFunction: testableFunction
    };
})();
var PS = PS || {};
PS.Test_Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Debug_Trace = PS.Debug_Trace;
    var Test_QuickCheck = PS.Test_QuickCheck;
    var Starter_Kit_Example = PS.Starter_Kit_Example;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var main = function __do() {
        Debug_Trace.trace("The differences of an empty list are empty.")();
        Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableBoolean)(1)(Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqArray(Prelude.eqNumber)))(Starter_Kit_Example.diffs([  ]))(new Data_Maybe.Just([  ])))();
        Debug_Trace.trace("The differences of a single-element list are empty.")();
        Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(Test_QuickCheck.arbNumber)(Test_QuickCheck.testableBoolean))(function (n) {
            return Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqArray(Prelude.eqNumber)))(Starter_Kit_Example.diffs([ n ]))(new Data_Maybe.Just([  ]));
        })();
        Debug_Trace.trace("The differences of a pair of equal elements are zero.")();
        Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(Test_QuickCheck.arbNumber)(Test_QuickCheck.testableBoolean))(function (n) {
            return Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqArray(Prelude.eqNumber)))(Starter_Kit_Example.diffs([ n, n ]))(new Data_Maybe.Just([ 0 ]));
        })();
        Debug_Trace.trace("The diffs function returns Just (...) for a sorted list.")();
        Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(Test_QuickCheck.arbArray(Test_QuickCheck.arbNumber))(Test_QuickCheck.testableBoolean))(function (ns) {
            return Data_Maybe.isJust(Starter_Kit_Example.diffs(Data_Array.sort(Prelude.ordNumber)(ns)));
        })();
        Debug_Trace.trace("The diffs function returns Nothing for a reverse-sorted list with at least one pair of unequal elements.")();
        return Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(Test_QuickCheck.arbNumber)(Test_QuickCheck.testableFunction(Test_QuickCheck.arbArray(Test_QuickCheck.arbNumber))(Test_QuickCheck.testableBoolean)))(function (n1) {
            return function (ns) {
                return Data_Maybe.isNothing(Starter_Kit_Example.diffs(Data_Array.reverse(Data_Array.sort(Prelude.ordNumber)(Prelude[":"](n1)(Prelude[":"](n1 + 1)(ns))))));
            };
        })();
    };
    return {
        main: main
    };
})();
PS.Test_Main.main();

